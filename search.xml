<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Publishing cli-package to npm repository</title>
      <link href="/2018/03/18/pub-clipkg-npm-repo/"/>
      <url>/2018/03/18/pub-clipkg-npm-repo/</url>
      <content type="html"><![CDATA[<p>好奇一些第三方的 node 命令行工具是如何制作与发布的，于是研究了下以便以后发布自己的命令行工具作为参考</p><a id="more"></a><h2 id="首先在-package-json-中定义几个必要的字段"><a href="#首先在-package-json-中定义几个必要的字段" class="headerlink" title="首先在 package.json 中定义几个必要的字段"></a>首先在 <code>package.json</code> 中定义几个必要的字段</h2><ul><li>cli 名称定义为 <code>sepcontacto</code></li><li>版本号 <code>1.0.0</code></li><li>指定 cli 入口 <code>&quot;bin&quot;: &quot;./contact.js&quot;</code></li><li>设置 preferGlobal</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"sepcontacto"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"A command-line contact management system"</span>,</span><br><span class="line">  <span class="string">"preferGlobal"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"bin"</span>: <span class="string">"./contact.js"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"commander"</span>: <span class="string">"^2.15.1"</span>,</span><br><span class="line">    <span class="string">"inquirer"</span>: <span class="string">"^5.2.0"</span>,</span><br><span class="line">    <span class="string">"mongoose"</span>: <span class="string">"^4.9.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>在 npmjs.com 注册账号</p><p>同时可以在 <a href="https://www.npmjs.com/~septenary" target="_blank" rel="noopener">https://www.npmjs.com/~septenary</a> 可以查看自己账号下发布的 package</p><h2 id="给-npm-配置账号信息"><a href="#给-npm-配置账号信息" class="headerlink" title="给 npm 配置账号信息"></a>给 npm 配置账号信息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><h2 id="发布-package"><a href="#发布-package" class="headerlink" title="发布 package"></a>发布 package</h2><p>cd 到要发布的 package 目录下，执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>再去 <a href="https://www.npmjs.com/~septenary" target="_blank" rel="noopener">https://www.npmjs.com/~septenary</a> 可以看到 package 已经发布成功</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>发布成功后，就可以像普通 package 那样安装自己的包了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sepcontacto -g</span><br></pre></td></tr></table></figure><p>你会看到 我们的 cli 添加到了 /usr/local/bin 中</p><blockquote><p>/usr/local/bin/sepcontacto</p></blockquote><p>接下来就可以愉快玩耍 cli 了</p><hr><p>参考: </p><ul><li><a href="https://docs.npmjs.com/getting-started/publishing-npm-packages" target="_blank" rel="noopener">https://docs.npmjs.com/getting-started/publishing-npm-packages</a></li><li><a href="https://scotch.io/tutorials/build-an-interactive-command-line-application-with-nodejs" target="_blank" rel="noopener">https://scotch.io/tutorials/build-an-interactive-command-line-application-with-nodejs</a></li></ul>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MEAN 栈实践之 在 CVM、AWS 上的的部署小记</title>
      <link href="/2017/03/02/mean-practice-on-cvm-aws/"/>
      <url>/2017/03/02/mean-practice-on-cvm-aws/</url>
      <content type="html"><![CDATA[<p>简单记录了当初考虑在 <strong>腾讯云</strong> 还是 <strong>AWS</strong> 部署服务的小记，虽然最终还是在 阿里云上部署。。。</p><a id="more"></a><h1 id="Ⅰ-腾讯云-CVM-部署"><a href="#Ⅰ-腾讯云-CVM-部署" class="headerlink" title="Ⅰ. 腾讯云 CVM 部署"></a>Ⅰ. 腾讯云 CVM 部署</h1><p>考虑数据库与服务器配置在同一主机上，勾选磁盘空间</p><h2 id="配置-ssh-公钥"><a href="#配置-ssh-公钥" class="headerlink" title="配置 ssh 公钥"></a>配置 ssh 公钥</h2><p>1.本地 <code>ssh-keygen</code> 生成密钥, 在 <code>~/.ssh/config</code> 中添访问配置</p><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host qcloud</span><br><span class="line">HostName 公网IP</span><br><span class="line">User root</span><br><span class="line">Port 22</span><br><span class="line">IdentityFile ~/.ssh/qcloud_rsa</span><br></pre></td></tr></table></figure></code></pre><p>2.在云主机配置公钥<br>3.连接云主机 <code>ssh qcloud</code></p><h2 id="MongoDB-的安装"><a href="#MongoDB-的安装" class="headerlink" title="MongoDB 的安装"></a>MongoDB 的安装</h2><p>1.连接云主机</p><p>2.编辑 <code>/etc/yum.repos.d/mongodb-org-3.4.repo</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><br></pre></td></tr></table></figure><p>3.执行 <code>sudo yum install -y mongodb-org</code> 进行安装</p><p>4.对于类 <strong>SELinux</strong> 系统 ，需要置成 <strong>disabled</strong></p><p>5.<strong>mongod</strong> 操作: <code>sudo service mongod</code> + <code>start</code> , <code>stop</code> , <code>restart</code></p><p>6.配置开机自启动 <code>sudo chkconfig mongod on</code></p><hr><h1 id="Ⅱ-AWS-部署"><a href="#Ⅱ-AWS-部署" class="headerlink" title="Ⅱ. AWS 部署"></a>Ⅱ. AWS 部署</h1><h2 id="安全组配置"><a href="#安全组配置" class="headerlink" title="安全组配置"></a>安全组配置</h2><table><thead><tr><th>类型</th><th>协议</th><th>端口范围</th><th>来源</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>0.0.0.0/0</td></tr><tr><td>所有 ICMP</td><td>全部</td><td>不适用</td><td>0.0.0.0/0</td></tr></tbody></table><h2 id="退出-SSH-继续运行程序"><a href="#退出-SSH-继续运行程序" class="headerlink" title="退出 SSH 继续运行程序"></a>退出 SSH 继续运行程序</h2><ol><li>执行 <code>screen</code> 进入子界面</li><li>执行程序 <code>sudo node ./bin/www</code></li><li><code>ctrl + A</code> 后键入 <code>D</code> 退出子界面</li><li>退出 SSH，程序会继续运行</li><li><p>再次连接 SSH，执行 <code>screen -ls</code> 查看由screen维护的进程id</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">There is a screen on:</span><br><span class="line">20232.pts-0.ip-172-31-30-2(01/19/17 07:24:36)(Detached)</span><br><span class="line">1 Socket in /var/run/screen/S-ubuntu.</span><br></pre></td></tr></table></figure></li><li><p><code>screen -r 20232.pts-0.ip-172-31-30-2</code> 进入子界面管理 node 进程</p></li></ol><h2 id="使用PM2管理程序"><a href="#使用PM2管理程序" class="headerlink" title="使用PM2管理程序"></a>使用PM2管理程序</h2><ol><li>安装pm2 <code>[sudo] npm install pm2 -g</code></li><li><p>创建一个apps.json，然后通过pm2 start apps.json来启动apps.json里面定义的apps，该文件就是一个json格式的配置文件，告诉pm2该怎么去启动app，启动哪些app。比如：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">"name":"your app name",</span><br><span class="line">"script":"the script to start your app",</span><br><span class="line">"cwd":"change working directory", // 指定该app工作目录，这样pm2会相对这个目录去找脚本之类的。</span><br><span class="line">"error_file":"app-err.log",</span><br><span class="line">"out_file":"app-out.log",</span><br><span class="line">"pid_file":"app.pid",</span><br><span class="line">"one_launch_only":"true",</span><br><span class="line">"env": &#123;</span><br><span class="line">"NODE_ENV":"production"</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li><p><a href="http://www.jianshu.com/p/fdc12d82b661" target="_blank" rel="noopener">参考</a></p></li></ol><h2 id="保证-mongod-在-nodejs-前启动"><a href="#保证-mongod-在-nodejs-前启动" class="headerlink" title="保证 mongod 在 nodejs 前启动"></a>保证 mongod 在 nodejs 前启动</h2><p><a href="http://antrikshy.com/blog/run-mongodb-automatically-nodejs-project" target="_blank" rel="noopener">Link</a></p>]]></content>
      
      <categories>
          
          <category> devOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> devOps </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 盒子适配解决办法汇总</title>
      <link href="/2015/12/10/android-box-adaption/"/>
      <url>/2015/12/10/android-box-adaption/</url>
      <content type="html"><![CDATA[<p>虽然现在大部分盒子和智能电视都是1080P或720P的分辨率，但考虑到有些山寨厂商的分辨率并没有按照标准执行，我们通常用 dp 在不同分辨率上做的适配方案所达到的适配效果在部分盒子上并不理想，而且工程量也大。这就产生了怎么样做好一次布局，多处适配的方案。下面分别介绍一下我收集到的三种适配方案，以及各自的优劣之处。</p><a id="more"></a><h1 id="集中适配-LayoutCompat"><a href="#集中适配-LayoutCompat" class="headerlink" title="集中适配 LayoutCompat"></a>集中适配 LayoutCompat</h1><p>1.设计师通常会按照某一特定分辨率进行UI设计，以 <strong>1920x1080</strong> 的标注图为例，在 <strong>res/layout</strong> 文件夹下创建UI视图，参照标注图的尺寸，所有UI视图都按照 <strong>像素px</strong> 为单位配置 （ TextView 的 textSize也不例外）。</p><p>2.写好了所有的 <strong>layout.xml</strong> 布局后，要介绍一下 <code>LayoutCompat</code> 这个工具类的使用。<code>LayoutCompat</code> 首先按照当前设备的分辨率 与 <strong>1920x1080</strong> 比较计算出一个缩放因子 <code>scaleFactor</code>，然后遍历根视图下所有子View，按照 <code>scaleFactor</code> 重新计算子View的 <code>LayoutParams</code>, <code>padding</code>, <code>margin</code>, <code>textSize</code> 等等，然后重新配置给子View。你只需要在 <code>Activity</code> 中调用 <code>setContent()</code> 后执行下面语句，就完成了所有设备的适配工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutCompat.init(<span class="keyword">this</span>);</span><br><span class="line">LayoutCompat.L1080P.compat(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>其中静态常量 <code>L1080P</code> 是 <code>LayoutComat</code> 预设好的设计方案，如果是按照其他分辨率的标准设计，以 <strong>1280x720</strong> 为例，可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LayoutCompat.init(<span class="keyword">this</span>);</span><br><span class="line">LayoutCompat.obtain(<span class="number">1280</span>,<span class="number">720</span>).compat(<span class="keyword">this</span>);</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.介绍一下 `LayoutCompat` 工具类部分核心代码，获取源代码，戳这里[Github源码](https:<span class="comment">//github.com/Ryfthink/LayoutCompat)找到它</span></span><br><span class="line"></span><br><span class="line">计算缩放因子 </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">baseScale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sBaseScaleByW ? (<span class="number">1f</span> * sScreenSize.x / mDesignWidth) : (<span class="number">1f</span> * sScreenSize.y / mDesignHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配Activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compatActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 找到Activity 的 rootView进行适配</span></span><br><span class="line">    compatViewImpl(activity.findViewById(android.R.id.content));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配View</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compatViewImpl</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sScreenSize == <span class="keyword">null</span> || sScreenSize.x == <span class="number">0</span> || sScreenSize.y == <span class="number">0</span>) &#123;</span><br><span class="line">        init(view.getContext());</span><br><span class="line">    &#125;</span><br><span class="line">    ViewGroup.LayoutParams params = view.getLayoutParams();</span><br><span class="line">    <span class="comment">// 计算 width ，height ，margin</span></span><br><span class="line">    <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (params.width &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            params.width = w(params.width);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params.height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            params.height = h(params.height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params <span class="keyword">instanceof</span> MarginLayoutParams) &#123;</span><br><span class="line">            MarginLayoutParams mParams = (MarginLayoutParams) params;</span><br><span class="line">            mParams.leftMargin = w(mParams.leftMargin);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算 padding</span></span><br><span class="line">    view.setPadding(w(view.getPaddingLeft()), h(view.getPaddingTop()), w(view.getPaddingRight()), h(view.getPaddingBottom()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 TextView 的 size</span></span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> TextView) &#123;</span><br><span class="line">        TextView tv = (TextView) view;</span><br><span class="line">        tv.setTextSize(TypedValue.COMPLEX_UNIT_PX, w((<span class="keyword">int</span>) tv.getTextSize()));</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历子View 并适配</span></span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">        ViewGroup vg = (ViewGroup) view;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = vg.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            compactViewImpl(vg.getChildAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.优缺点</p><ul><li>优点：轻量级适配，代码量少，方便快捷 </li><li>缺点：不能适配 res/drawable 下的资源</li></ul><h1 id="自定义-AutoLayout"><a href="#自定义-AutoLayout" class="headerlink" title="自定义 AutoLayout"></a>自定义 AutoLayout</h1><p>1.这种方式重写了部分 ViewGroup:（<code>LinearLayout</code>，<code>RelativeLayout</code>，<code>FrameLayout</code>），配合工具类 <code>AutoUtils</code> ，按照特定分辨率用 px 单位配置 <strong>layout</strong>，然后重新计算 <code>padding，margin， size</code> 等，戳这里<a href="https://github.com/hongyangAndroid/AndroidAutoLayout" target="_blank" rel="noopener">Github</a>找到项目</p><p>2.优缺点</p><ul><li>轻量级适配</li><li>不能适配 res/drawable 下的资源，源码相对一号方案还很臃肿，需要外部引入的方式，扩展性不理想，必须使用给定的 ViewGroup ，自由度下降</li></ul><h1 id="多分辨率-dimens-value"><a href="#多分辨率-dimens-value" class="headerlink" title="多分辨率 dimens value"></a>多分辨率 dimens value</h1><p>1.<strong>优酷TV版</strong> 采取的适配方案，逆向该工程可以看到，有以下资源<br><img src="http://assets.septenary.cn/user/1/image/5dd63063-7a6e-4bc3-ed5d-ca6b89b9154f" alt="values-nodpi-x"> </p><p>再来看一下某一个 layout 文件<br><img src="http://assets.septenary.cn/user/1/image/1e162b93-3b17-49f1-cd40-a096c3f24fbf" alt="layout.xml"> </p><p>其中除了 <code>fill_parent</code> 和 <code>wrap_content</code>，都是引用 <strong>dimens</strong> 的值来配置，上图已经列出大多数分辨率的 <strong>values</strong>，这些<strong>dimens</strong> 在每个 <strong>values-nodpi-x</strong> 文件夹下都有一份 <strong>dimens.xml</strong> ，接下来看一下其中一个 <strong>dimens.xml</strong> 文件记录的值：<br><img src="http://assets.septenary.cn/user/1/image/f0f6fa66-b26b-42ff-8939-977b0cc6c305" alt="dimens.xml"> </p><p>可以看到，该文件针对于与之对应的分辨率（ <strong>values-nodpi-x</strong>） 做了适配.</p><p>2.优缺点<br>-优点：适配完全交给了framework，不需要开发者配置任何代码<br>-缺点：分辨率列出的有限，工程略臃肿。</p><p>3.上图列出的  <strong>values-nodpi-x</strong> 由脚本生成，通过它可以帮开发者解决些这么多values-xx 的麻烦事情，戳这里<a href="http://blog.csdn.net/lmj623565791/article/details/45460089" target="_blank" rel="noopener">链接</a>，参考 <code>GenerateValueFiles</code> 自动生成 values 文件程序</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
