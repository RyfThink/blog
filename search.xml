<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Publishing cli-package to npm repository</title>
      <link href="/2018/03/18/pub-clipkg-npm-repo/"/>
      <url>/2018/03/18/pub-clipkg-npm-repo/</url>
      <content type="html"><![CDATA[<p>好奇一些第三方的 node 命令行工具是如何制作与发布的，于是研究了下以便以后发布自己的命令行工具作为参考</p><a id="more"></a><h2 id="首先在-package-json-中定义几个必要的字段"><a href="#首先在-package-json-中定义几个必要的字段" class="headerlink" title="首先在 package.json 中定义几个必要的字段"></a>首先在 <code>package.json</code> 中定义几个必要的字段</h2><ul><li>cli 名称定义为 <code>sepcontacto</code></li><li>版本号 <code>1.0.0</code></li><li>指定 cli 入口 <code>&quot;bin&quot;: &quot;./contact.js&quot;</code></li><li>设置 preferGlobal</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"sepcontacto"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"A command-line contact management system"</span>,</span><br><span class="line">  <span class="string">"preferGlobal"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"bin"</span>: <span class="string">"./contact.js"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"commander"</span>: <span class="string">"^2.15.1"</span>,</span><br><span class="line">    <span class="string">"inquirer"</span>: <span class="string">"^5.2.0"</span>,</span><br><span class="line">    <span class="string">"mongoose"</span>: <span class="string">"^4.9.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>在 npmjs.com 注册账号</p><p>同时可以在 <a href="https://www.npmjs.com/~septenary" target="_blank" rel="noopener">https://www.npmjs.com/~septenary</a> 可以查看自己账号下发布的 package</p><h2 id="给-npm-配置账号信息"><a href="#给-npm-配置账号信息" class="headerlink" title="给 npm 配置账号信息"></a>给 npm 配置账号信息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><h2 id="发布-package"><a href="#发布-package" class="headerlink" title="发布 package"></a>发布 package</h2><p>cd 到要发布的 package 目录下，执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>再去 <a href="https://www.npmjs.com/~septenary" target="_blank" rel="noopener">https://www.npmjs.com/~septenary</a> 可以看到 package 已经发布成功</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>发布成功后，就可以像普通 package 那样安装自己的包了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sepcontacto -g</span><br></pre></td></tr></table></figure><p>你会看到 我们的 cli 添加到了 /usr/local/bin 中</p><blockquote><p>/usr/local/bin/sepcontacto</p></blockquote><p>接下来就可以愉快玩耍 cli 了</p><hr><p>参考: </p><ul><li><a href="https://docs.npmjs.com/getting-started/publishing-npm-packages" target="_blank" rel="noopener">https://docs.npmjs.com/getting-started/publishing-npm-packages</a></li><li><a href="https://scotch.io/tutorials/build-an-interactive-command-line-application-with-nodejs" target="_blank" rel="noopener">https://scotch.io/tutorials/build-an-interactive-command-line-application-with-nodejs</a></li></ul>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ReactNative Tutorial</title>
      <link href="/2017/12/25/react-native-tutorial/"/>
      <url>/2017/12/25/react-native-tutorial/</url>
      <content type="html"><![CDATA[<h1 id="ReactNative-Tutorial"><a href="#ReactNative-Tutorial" class="headerlink" title="ReactNative Tutorial"></a>ReactNative Tutorial</h1><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>1.<strong>nodejs</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>2.<strong>npm4</strong>  <a href="https://github.com/facebook/react-native/issues/14767" target="_blank" rel="noopener">why not npm5?</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm@4</span><br></pre></td></tr></table></figure><p>3.<strong>yarn</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure><p>4.<strong>watchman</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/16432071/how-to-fix-homebrew-permissions/16450503" target="_blank" rel="noopener">watchman permission</a> : <code>sudo chown -R $(whoami) $(brew --prefix)/*</code></p><p>5.<strong>react-native-cli</strong>  or  <del>create-react-native-app</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure><h3 id="Run-it"><a href="#Run-it" class="headerlink" title="Run it"></a>Run it</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init ReactNativeTutorial</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">react-native run-ios</span><br><span class="line">react-native run-android</span><br></pre></td></tr></table></figure><p><strong>Android issue</strong></p><ul><li>./android/gradle/wrapper/gradle-wrapper.properties</li><li>./android/build.gradle</li><li>./android/app/build.gradle</li><li>./android/local.properties</li><li>touch ~/.gradle/gradle.properties &amp;&amp; echo “org.gradle.daemon=true” &gt;&gt; ~/.gradle/gradle.properties</li></ul><p><strong>iOS issue</strong></p><ul><li><a href="https://stackoverflow.com/questions/39778607/error-running-react-native-app-from-terminal-ios" target="_blank" rel="noopener">xcrun: error</a> :  <em>Xcode/Setting/Location</em> -&gt; Command Line Tools</li></ul><h3 id="Developer-Menu"><a href="#Developer-Menu" class="headerlink" title="Developer Menu"></a>Developer Menu</h3><h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h3><p><img src="https://raw.githubusercontent.com/Ryfthink/ReactNativeTutorial/master/art/15135035648483.jpg" alt=""></p><h2 id="ES6-标准"><a href="#ES6-标准" class="headerlink" title="ES6 标准"></a>ES6 标准</h2><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">参考-1</a><br><a href="http://blog.kdchang.cc/2016/04/04/react-react-native-es5-es6-cheat-sheet" target="_blank" rel="noopener">参考-2</a></p><p> <strong>Modules</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;parseData&#125; <span class="keyword">from</span> <span class="string">'./xxx'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> APIs <span class="keyword">from</span> <span class="string">'../constants/ServerAPIs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Compoent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parseData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Classes &amp; Method</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick(event) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Property initializers</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Text&gt;Hello&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">Todo.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">    checked: false,</span></span><br><span class="line"><span class="regexp">    maxLength: 10,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">Todo.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">    checked: React.PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">    maxLength: React.PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p><strong>State</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        maxLength: <span class="keyword">this</span>.props.maxLength,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            maxLength: <span class="keyword">this</span>.props.maxLength,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Arrow functions</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> console.log("Arrow function called") &#125;&#125;/&gt;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Dynamic property names &amp; template strings</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stateName = <span class="string">"toggle"</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123; [<span class="string">`<span class="subst">$&#123;stateName&#125;</span>Value`</span>]: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>Destructuring &amp; spread attributes</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">var</span> &#123;</span><br><span class="line">      className,</span><br><span class="line">      ...others,  <span class="comment">// ...others 包含 this.props 除了 className 外所有值。this.props = &#123;value: 'true', title: 'header', className: 'content'&#125;</span></span><br><span class="line">    &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;className&#125;&gt;</span><br><span class="line">        &lt;TodoList &#123;...others&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleLoadMoreClick&#125;&gt;Load more&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Default Parameters</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">height = <span class="number">50</span>, color = <span class="string">'red'</span></span>) </span>&#123;  </span><br><span class="line">  ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;  </span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Text&gt;This is a title!<span class="xml"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">          &lt;View&gt;</span><br><span class="line">            &lt;Text&gt;This is a Summary&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>View&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="props-amp-state"><a href="#props-amp-state" class="headerlink" title="props &amp; state"></a>props &amp; state</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            childName = <span class="string">"子组件"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;ChildComponent name=&#123;<span class="keyword">this</span>.state.childName&#125;&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;Text&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h3><p><img src="https://raw.githubusercontent.com/Ryfthink/ReactNativeTutorial/master/art/15138721832230.jpg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件开始装载之前调用，在一次生命周期中只会执行一次。</span></span><br><span class="line">componentWillMount()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件完成装载之后调用，在一次生命周期中只会执行一次，从这里开始就可以对组件进行各种操作了，比如在组件装载完成后要显示的时候执行动画。</span></span><br><span class="line">componentDidMount()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件属性更新之前调用，每一次属性更新都会调用</span></span><br><span class="line">componentWillUpdate(object nextProps, object nextState)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件属性更新之后调用，每次属性更新都会调用</span></span><br><span class="line">componentDidUpdate(object prevProps, object prevState)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件卸载之前调用</span></span><br><span class="line">componentWillUnmount()</span><br></pre></td></tr></table></figure><h3 id="Style-amp-FlexBox"><a href="#Style-amp-FlexBox" class="headerlink" title="Style &amp; FlexBox"></a>Style &amp; FlexBox</h3><p><img src="https://raw.githubusercontent.com/Ryfthink/ReactNativeTutorial/master/art/15138754176654.png" alt=""></p><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p><strong>本地图片</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./assets/email.png'</span>)&#125;/&gt;</span><br></pre></td></tr></table></figure><p>Packager 会打包所有的图片并且依据屏幕精度提供对应的资源。比如: <strong>iPhone 6</strong> 会使用 <a href="mailto:email@2x.png" target="_blank" rel="noopener">email@2x.png</a>，而 <strong>Pixel</strong> 上则会使用 <a href="mailto:email@3x.png" target="_blank" rel="noopener">email@3x.png</a>。如果没有图片恰好满足屏幕分辨率，则会自动选中最接近的一个图片。</p><p><strong>网络图片</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Image source=&#123;&#123; <span class="attr">uri</span>: <span class="string">'https//assets.domain/xxx.jpg'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000002933776" target="_blank" rel="noopener">ATS issue</a><br><img src="https://raw.githubusercontent.com/Ryfthink/ReactNativeTutorial/master/art/15138869293237.jpg" alt=""></p><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView</span><br><span class="line">    dataSource=&#123;...&#125;</span><br><span class="line">    renderRow=&#123;...&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><p><a href="http://www.alloyteam.com/2016/01/reactnative-animated/" target="_blank" rel="noopener">参考</a></p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>React Native 提供了和 web 标准一致的Fetch API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fetch(&apos;https://mywebsite.com/endpoint/&apos;, &#123;</span><br><span class="line">  method: &apos;POST&apos;,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &apos;Accept&apos;: &apos;application/json&apos;,</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: JSON.stringify(&#123;</span><br><span class="line">    firstParam: &apos;yourValue&apos;,</span><br><span class="line">    secondParam: &apos;yourOtherValue&apos;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="AsyncStorage"><a href="#AsyncStorage" class="headerlink" title="AsyncStorage"></a>AsyncStorage</h2><p>是一个简单的、异步的、持久化的 <strong>key-value</strong> 存储系统，它对于App来说是全局性的。它用来代替 <strong>LocalStorage</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">async saveUserName(account: String) &#123;</span><br><span class="line">    let key = &apos;@key-user-name&apos;;</span><br><span class="line">    try &#123;</span><br><span class="line">        await AsyncStorage.setItem(key, account);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.warn(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">async getUserName() &#123;</span><br><span class="line">    let key = &apos;@key-user-name&apos;;</span><br><span class="line">    try &#123;</span><br><span class="line">        return await AsyncStorage.getItem(key);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.warn(error)</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="NativeBridge"><a href="#NativeBridge" class="headerlink" title="NativeBridge"></a>NativeBridge</h2><p><img src="https://raw.githubusercontent.com/Ryfthink/ReactNativeTutorial/master/art/15138857931917.jpg" alt=""></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>1.执行打包命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --entry-file index.js --platform ios --dev false --bundle-output release_ios/main.jsbundle --assets-dest release_ios/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ryfthink/ReactNativeTutorial/master/art/15138868113330.jpg" alt=""></p><p>2.将 <strong>assets</strong> 与 <strong>main.jsbundle</strong> 添加到项目中<br><img src="https://raw.githubusercontent.com/Ryfthink/ReactNativeTutorial/master/art/15138870589984.jpg" alt=""></p><p>3.修改 <strong>AppDelegate.m</strong>，让 React Native 去使用我们刚才导入的 <strong>jsbundle</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">  NSURL *jsCodeLocation;</span><br><span class="line"> //jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</span><br><span class="line"> +jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</span><br><span class="line">#endif</span><br><span class="line">...</span><br><span class="line">  return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.在 <a href="https://itunesconnect.apple.com" target="_blank" rel="noopener">iTunes Connect</a> 创建应用 ➜ 打包程序 ➜ 将应用提交到app store</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p><a href="https://developer.android.com/studio/publish/app-signing.html" target="_blank" rel="noopener">参考</a></p><ol><li>生成证书</li><li>配置gradle</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">android &#123;      </span><br><span class="line">    signingConfigs &#123;  </span><br><span class="line">        release &#123;  </span><br><span class="line">            storeFile file_dir</span><br><span class="line">            storePassword store_assword</span><br><span class="line">            keyAlias alias</span><br><span class="line">            keyPassword keyp_assword  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    buildTypes &#123;  </span><br><span class="line">        release &#123;   </span><br><span class="line">            signingConfig signingConfigs.release  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.打包 APK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew assembleRelease</span><br></pre></td></tr></table></figure><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><h3 id="codepush"><a href="#codepush" class="headerlink" title="codepush"></a>codepush</h3><p><a href="https://microsoft.github.io/code-push/" target="_blank" rel="noopener">https://microsoft.github.io/code-push/</a></p><h3 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h3><p><a href="http://www.lcode.org/react-native-hot-update/" target="_blank" rel="noopener">参考1</a><br><a href="http://www.jianshu.com/p/2cb3eb9604ca" target="_blank" rel="noopener">参考2</a></p><p>以 Android 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --entry-file index.js --platform android --dev false --bundle-output release_android/main.jsbundle --assets-dest release_android/</span><br></pre></td></tr></table></figure><ul><li>1.初始项目发布时，生成并保留一份 <strong>bundle</strong> 文件。</li><li>2.有版本更新时，生成新的  <strong>bundle</strong> 文件，</li><li>3.使用 <strong>google-diff-match-patch</strong> 对比两个文件，并生成差异补丁文件。</li><li>4.App 下载补丁文件，再使用 <strong>google-diff-match-patch</strong> 和 assets 目录下的初始版本合并，生成新的 <strong>bundle</strong> 文件。</li></ul><p><img src="https://raw.githubusercontent.com/Ryfthink/ReactNativeTutorial/master/art/15138880360088.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> RN </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Logstash Mapping 配置</title>
      <link href="/2017/05/23/logstash-mapping-config/"/>
      <url>/2017/05/23/logstash-mapping-config/</url>
      <content type="html"><![CDATA[<p>现在有两组 JSON 日志需要上报到 Elasticsearch</p><ul><li>下载失败日志</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"Topic"</span>: <span class="string">"download_failed"</span>,</span><br><span class="line"> <span class="attr">"Source"</span>: <span class="string">"192.168.1.158"</span>,</span><br><span class="line"> <span class="attr">"FailCode"</span>: <span class="string">"0500"</span>,</span><br><span class="line"> <span class="attr">"Title"</span>: <span class="string">"多米尼克大战"</span>,</span><br><span class="line"> <span class="attr">"Space"</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="attr">"Time"</span>: <span class="number">1494023823</span>,</span><br><span class="line"> <span class="attr">"Speed"</span>: <span class="string">"84.82267"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下载成功日志</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"Topic"</span>: <span class="string">"download_success"</span>,</span><br><span class="line"> <span class="attr">"Source"</span>: <span class="string">"192.168.1.158"</span>,</span><br><span class="line"> <span class="attr">"Title"</span>: <span class="string">"爱送书"</span>,</span><br><span class="line"> <span class="attr">"Space"</span>: <span class="number">1028</span>,</span><br><span class="line"> <span class="attr">"Time"</span>: <span class="number">1494090811</span>,</span><br><span class="line"> <span class="attr">"Speed"</span>: <span class="string">"120.82"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="filter配置"><a href="#filter配置" class="headerlink" title="filter配置"></a>filter配置</h1><p>配置好 <strong>logstash pipeline</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">   stdin&#123;</span><br><span class="line">       codec =&gt; json</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">filter&#123;  </span><br><span class="line"><span class="meta">   #</span><span class="bash"> @timestamp 取 stdin 传入的 __time__ 字段</span></span><br><span class="line">   date &#123;</span><br><span class="line">       match =&gt; ["Time", "UNIX"]</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 经纬度转换</span></span><br><span class="line">   geoip &#123; </span><br><span class="line">       source =&gt; "Source" </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">output &#123;</span><br><span class="line">   elasticsearch &#123;</span><br><span class="line">       hosts =&gt; ["http://localhost:9200"]</span><br><span class="line">       index =&gt; "logstash-android-%&#123;+YYYY.MM.dd&#125;"</span><br><span class="line">       document_type =&gt; "%&#123;Topic&#125;"</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.上面看到 投递到 Elasticsearch 的索引是 logstash- 为前缀，是为了让 geoIp 处理后的经纬度符合 geopint 类型，相关参考: <a href="https://github.com/elastic/logstash/issues/3137" target="_blank" rel="noopener">https://github.com/elastic/logstash/issues/3137</a></p><p>2.将这两条日志通过 pipeline 投递到 Elasticsearch 时会自动创建 mapping，可以在 <strong>kibana</strong> &gt; <strong>Dev Tools</strong> 通过命令查看 mapping</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET logstash-android-*/_mapping</span><br></pre></td></tr></table></figure><p>如果你的 mapping 类型和你预期的不符合，可以调整filter，比如 原始数据 Speed 字段是 string 类型，而你想要 float 类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutate &#123;</span><br><span class="line">convert =&gt; &#123;</span><br><span class="line">"Space" =&gt; "integer"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="template-配置"><a href="#template-配置" class="headerlink" title="template 配置"></a>template 配置</h1><ul><li style="list-style: none"><input type="checkbox" checked> TODO</li></ul>]]></content>
      
      <categories>
          
          <category> devOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ElasticSearch 定期删除过期索引</title>
      <link href="/2017/05/23/elasticsearch-delete-indices-period/"/>
      <url>/2017/05/23/elasticsearch-delete-indices-period/</url>
      <content type="html"><![CDATA[<h1 id="索引管理工具-curator"><a href="#索引管理工具-curator" class="headerlink" title="索引管理工具 curator"></a>索引管理工具 curator</h1><p>安装 curator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install elasticsearch-curator</span><br></pre></td></tr></table></figure><p>curator 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curator [--config CONFIG.YML] [--dry-run] ACTION_FILE.YML</span><br></pre></td></tr></table></figure><p>需要配置两个文件 <code>CONFIG.YML</code> 和 <code>ACTION_FILE.YML</code>， 若果不设置 <code>--config CONFIG.YML</code> 则读取默认路径配置 <code>~/.curator/curator.yml</code>，<code>--dry-run</code> 为调试模式，模拟删除，不做真实处理</p><p>下面是两个配置文件的具体内容</p><p><em>config.yaml</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">client:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">  url_prefix:</span></span><br><span class="line"><span class="attr">  use_ssl:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">  certificate:</span></span><br><span class="line"><span class="attr">  client_cert:</span></span><br><span class="line"><span class="attr">  client_key:</span></span><br><span class="line"><span class="attr">  ssl_no_validate:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">  http_auth:</span></span><br><span class="line"><span class="attr">  timeout:</span></span><br><span class="line"><span class="attr">  master_only:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  loglevel:</span> <span class="string">INFO</span></span><br><span class="line"><span class="attr">  logfile:</span></span><br><span class="line"><span class="attr">  logformat:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><p><em>action.yaml</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">actions:</span><br><span class="line">  1:</span><br><span class="line">    action: delete_indices</span><br><span class="line">    description: &apos;Base on index name, delete indices which prefix is logstash-android- and is older than 90 days. ref: https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html&apos;</span><br><span class="line">    options:</span><br><span class="line">      ignore_empty_list: True</span><br><span class="line">      timeout_override: 3600</span><br><span class="line">      continue_if_exception: False</span><br><span class="line">      disable_action: False</span><br><span class="line">    filters:</span><br><span class="line">      - filtertype: pattern</span><br><span class="line">        kind: prefix</span><br><span class="line">        value: logstash-android-</span><br><span class="line">        exclude: </span><br><span class="line">      - filtertype: age</span><br><span class="line">        source: name</span><br><span class="line">        direction: older</span><br><span class="line">        timestring: &apos;%Y.%m.%d&apos;</span><br><span class="line">        unit: days</span><br><span class="line">        unit_count: 90</span><br><span class="line">        exclude:</span><br></pre></td></tr></table></figure><h1 id="定期任务工具-crontab"><a href="#定期任务工具-crontab" class="headerlink" title="定期任务工具 crontab"></a>定期任务工具 crontab</h1><p>1.定期任务需要 crontab 命令，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>2.编写脚本任务 <strong>clean_expired_indices.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd `dirname $0`</span><br><span class="line">echo `pwd`</span><br><span class="line"><span class="meta">#</span> curator --config config_file.yml --dry-run action_file.yml</span><br><span class="line">curator --config config_file.yml action_file.yml</span><br></pre></td></tr></table></figure><ol><li>进入 vi 界面后，添加一行命令，每天凌晨 2 点执行清理脚本，保存退出</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * *  /bin/sh /path/to/clean_expired_indices.sh &gt;&gt; /var/log/clean_expired_indices.log</span><br></pre></td></tr></table></figure><ol><li>查看是否生效</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> devOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Logstash Pipeline 配置</title>
      <link href="/2017/05/16/logstash-pipeline-config/"/>
      <url>/2017/05/16/logstash-pipeline-config/</url>
      <content type="html"><![CDATA[<h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><ul><li><strong>-e</strong> 立即执行配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -e 'input &#123; stdint&#123;&#125; &#125; output &#123; stdout &#123;codec=&gt;rubydebug&#125; &#125;'</span><br></pre></td></tr></table></figure><ul><li><strong>-f</strong> 指定配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -f xxx.logstash.conf</span><br></pre></td></tr></table></figure><ul><li><strong>-t</strong> 测试配置语法并退出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -f test2.logstash.conf -t</span><br></pre></td></tr></table></figure><ul><li><strong>-l</strong> logstash 默认将日志输出到标准错误，生产环境可指定日志输出位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -l /var/logs/logstash.log</span><br></pre></td></tr></table></figure><ul><li><strong>-w</strong> 过滤器线程数量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -w 5</span><br></pre></td></tr></table></figure><ul><li><strong>-r</strong> 更改配置文件后自动重启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -f xxx.logstash.conf -r</span><br></pre></td></tr></table></figure><h1 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h1><p>logstash 设计了一套自己的 DSL 语法，包括以下部分</p><h2 id="区段"><a href="#区段" class="headerlink" title="区段"></a>区段</h2><p>一个标准配置有三个区段，其中 <strong>stdin, mutate, stdout</strong> 都是标准插件，想要自定义一个插件可以参考这篇文章 <a href="/2017/03/24/logstash-intergration-aliyun-oss-plugin/">Logstash 集成 aliyun/oss 插件</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    stdin&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter&#123;</span><br><span class="line">    mutate&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    sdtout&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h2><ul><li>array</li><li>boolean</li><li>bytes</li><li>Codec</li><li>hash</li><li>number</li><li>password</li><li>path</li><li>string</li></ul><h2 id="引用字段"><a href="#引用字段" class="headerlink" title="引用字段"></a>引用字段</h2><p>[filed] 即引用了一个字段，如果是顶级字段可以省略 [] 即 filed，如果是嵌套字段需要这样写[outer_filed][inner_filed]</p><p>像下面的数据结构引用 <strong>ip</strong> 字段: <code>[ip] 或 ip</code> ，引用 <strong>os</strong> 字段: <code>[ua][os]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "agent": "Mozilla/5.0 (compatible; MSIE 9.0)",</span><br><span class="line">  "ip": "192.168.24.44",</span><br><span class="line">  "request": "/index.html"</span><br><span class="line">  "response": &#123;</span><br><span class="line">    "status": 200,</span><br><span class="line">    "bytes": 52353</span><br><span class="line">  &#125;,</span><br><span class="line">  "ua": &#123;</span><br><span class="line">    "os": "Windows 7"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环境变量引用"><a href="#环境变量引用" class="headerlink" title="环境变量引用"></a>环境变量引用</h2><p>如下，引用环境变量 <code>${TCP_PORT}</code> , 可以添加默认值 <code>${TCP_PORT:3100}</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port =&gt; "$&#123;TCP_PORT:3100&#125;"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sprintf-格式"><a href="#sprintf-格式" class="headerlink" title="sprintf 格式"></a>sprintf 格式</h2><p>引用的字段可以应用于 <strong>sprintf</strong> 格式，如下 <code>%{}</code> 包装字段引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filter&#123;</span><br><span class="line">mutate &#123;</span><br><span class="line">add_tag =&gt; "new tag %&#123;[field]&#125;"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; "/var/log/%&#123;type&#125;.%&#123;+yyyy.MM.dd.HH&#125;"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>使用条件判断可以控制在区段内处理特定的事件，条件判断语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if EXPRESSION &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else if EXPRESSION &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见操作有</p><ul><li><strong>==, !=, &lt;, &gt;, &lt;=, &gt;=</strong> 等于操作</li><li><strong>=~, !~</strong>  正则匹配</li><li><strong>in, not in</strong> 包含</li><li><strong>and, or, nand, xor</strong> 与或非</li><li><strong>!</strong> 取反</li></ul><p>举个例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在过滤器中，action 字段为 login 时，删除 secret</span></span><br><span class="line">filter &#123;</span><br><span class="line">    if [action] == "login" &#123;</span><br><span class="line">        mutate &#123; remove =&gt; "secret" &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    # 发送消息到 pagerduty</span><br><span class="line">    if [loglevel] == "ERROR" and [deployment] == "production" &#123;</span><br><span class="line">        pagerduty &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注意: 字段引用、sprintf 格式、条件判断只能用于 filter 和 output，不能用于input</em></p><h2 id="metadata"><a href="#metadata" class="headerlink" title="@metadata"></a>@metadata</h2><p>最常见的用法是在 filter 中指定 <strong>@metadata</strong>，控制输出逻辑，<strong>@metadata</strong> 作为元数据并不会随数据一并输出，可视为临时变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input &#123; stdin &#123; &#125; &#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123; add_field =&gt; &#123; "show" =&gt; "This data will be in the output" &#125; &#125;</span><br><span class="line">    mutate &#123; add_field =&gt; &#123; "[@metadata][output]" =&gt; "stdout" &#125; &#125;</span><br><span class="line">    mutate &#123; add_field =&gt; &#123; "[@metadata][output]" =&gt; "file" &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    if [@metadata][output] == "stdout" &#123;</span><br><span class="line">        stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">    &#125; else if [@metadata][output] == "file" &#123;</span><br><span class="line">        file &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若想输出 <strong>@metadata</strong> 字段，需要设置 <code>metadata =&gt; true</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stdout &#123; codec =&gt; rubydebug &#123; metadata =&gt; true &#125; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> devOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mean.septenary.cn 搭建之登录逻辑梳理</title>
      <link href="/2017/05/05/node-login-module/"/>
      <url>/2017/05/05/node-login-module/</url>
      <content type="html"><![CDATA[<h1 id="1-通常登录方式都有哪些"><a href="#1-通常登录方式都有哪些" class="headerlink" title="1.通常登录方式都有哪些?"></a>1.通常登录方式都有哪些?</h1><p><a href="https://cnodejs.org/topic/5671441a1d2912ce2a35aaa1" target="_blank" rel="noopener">登录那些事儿</a></p><h1 id="2-restful-API-形式的-登录服务-passport-jwt"><a href="#2-restful-API-形式的-登录服务-passport-jwt" class="headerlink" title="2.restful API 形式的 登录服务 passport-jwt"></a>2.restful API 形式的 登录服务 passport-jwt</h1><ul><li><a href="http://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">什么是 JWT – JSON WEB TOKEN</a></li><li><a href="http://blog.csdn.net/ljinddlj/article/details/53108261" target="_blank" rel="noopener">OAuth 2和JWT - 如何设计安全的API</a></li><li><a href="https://medium.com/@blacksonic86/angular-2-authentication-revisited-611bf7373bf9#.5mixgxid0" target="_blank" rel="noopener">Angular authentication revisited</a></li><li><a href="http://jasonwatmore.com/post/2016/08/16/angular-2-jwt-authentication-example-tutorial" target="_blank" rel="noopener">angular2-jwt-auth-example</a></li><li><a href="https://blog.jscrambler.com/implementing-jwt-using-passport/" target="_blank" rel="noopener">express-jwt-server</a></li><li><a href="https://yq.aliyun.com/articles/59043" target="_blank" rel="noopener">使用Json Web Token设计Passport系统</a></li><li><a href="http://blog.slatepeak.com/creating-a-simple-node-express-api-authentication-system-with-passport-and-jwt/" target="_blank" rel="noopener">Creating a Simple Node/Express API Authentication System with Passport and JWT</a></li><li><a href="http://blog.slatepeak.com/building-a-basic-restful-api-for-a-chat-system/" target="_blank" rel="noopener">Building a Basic RESTful API for a Chat System</a></li></ul><h2 id="jwt-如何保证在浏览器中的安全存储"><a href="#jwt-如何保证在浏览器中的安全存储" class="headerlink" title="jwt 如何保证在浏览器中的安全存储"></a>jwt 如何保证在浏览器中的安全存储</h2><ol><li>Set-Cookie (http only)</li><li>LocalStorage: JWT 在浏览器中以加密方式存储在 localStorage 中，但 localStorage 无法防范 XSS 攻击，好在 Angular2 有”跨站脚本安全模型”, 可按照<a href="https://angular.cn/docs/ts/latest/guide/security.html#!#xss" target="_blank" rel="noopener">文档</a></li></ol><h2 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h2><p>需要用到的库</p><ul><li>jwt-simple (jwt encode decode）</li><li>moment</li><li>passport</li><li>passport-jwt</li></ul><p>1.验证用户名密码后，响应生成的 jwt</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = &#123;<span class="attr">id</span>:<span class="string">'1'</span>, <span class="attr">email</span>: <span class="string">'seven__up@sina.cn'</span>, <span class="attr">password</span>: <span class="string">'123456'</span>, <span class="attr">role</span>: <span class="string">'admin'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> SECRET = <span class="string">'my-jwt-secret'</span>;</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">"/login"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> email = req.body.email;</span><br><span class="line">    <span class="keyword">let</span> password = req.body.password;</span><br><span class="line">    <span class="keyword">if</span> (me.email == email &amp;&amp; me.password &amp;&amp; password) &#123;</span><br><span class="line">        <span class="keyword">let</span> payload = &#123;</span><br><span class="line">            id: me.id,</span><br><span class="line">            role: me.role,</span><br><span class="line">            iat: moment().unix(), <span class="comment">// 签发时间</span></span><br><span class="line">            exp: moment().add(<span class="number">5</span>, <span class="string">'minute'</span>).unix() <span class="comment">// 过期时间</span></span><br><span class="line">        &#125;;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            token: jwt.encode(payload, SECRET);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.sendStatus(<span class="number">401</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.受限 API 的访问</p><p>route:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">"/user"</span>, auth.authenticate(), <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </span><br><span class="line">    res.json(users[<span class="number">0</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>authenticate:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> strategy = <span class="keyword">new</span> Strategy(params, <span class="function"><span class="keyword">function</span>(<span class="params">req, payload, done</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> user = users[payload.id] || <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (user) &#123;</span><br><span class="line">            <span class="keyword">return</span> done(<span class="literal">null</span>, &#123;</span><br><span class="line">                id: user.id</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> done(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"User not found"</span>), <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    passport.use(<span class="string">'jwt'</span>, strategy);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> passport.initialize();</span><br><span class="line">        &#125;,</span><br><span class="line">        authenticate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> passport.authenticate(<span class="string">'jwt'</span>, cfg.jwtSession);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>get token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H "Content-Type: application/json" -X POST -d '&#123;"email":"seven__up@sina.cn","password":"123456"&#125;' http://localhost:4300/api/auth/login</span><br></pre></td></tr></table></figure><p>request with token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -I --header "Authorization:JWT TOKEN" localhost:4300/api/user</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Logstash 集成 aliyun/oss 插件</title>
      <link href="/2017/03/24/logstash-intergration-aliyun-oss-plugin/"/>
      <url>/2017/03/24/logstash-intergration-aliyun-oss-plugin/</url>
      <content type="html"><![CDATA[<h1 id="安装使用-jruby"><a href="#安装使用-jruby" class="headerlink" title="安装使用 jruby"></a>安装使用 <strong>jruby</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rvm install jruby-9.1.7.0</span><br><span class="line">rvm use jruby-9.1.7.0 --default</span><br></pre></td></tr></table></figure><h1 id="安装-bundler"><a href="#安装-bundler" class="headerlink" title="安装 bundler"></a>安装 <strong>bundler</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install bundler</span><br></pre></td></tr></table></figure><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>用工具生成项目模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash-plugin generate --type input --name alioss --path ./</span><br></pre></td></tr></table></figure><p>当前目录下创建了一个名为 logstash-input-alioss 的工程，目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|____CHANGELOG.md</span><br><span class="line">|____CONTRIBUTORS</span><br><span class="line">|____DEVELOPER.md</span><br><span class="line">|____Gemfile</span><br><span class="line">|____Gemfile.lock</span><br><span class="line">|____lib</span><br><span class="line">| |____logstash</span><br><span class="line">| | |____inputs</span><br><span class="line">| | | |____alioss.rb</span><br><span class="line">|____LICENSE</span><br><span class="line">|____logstash-input-alioss.gemspec</span><br><span class="line">|____Rakefile</span><br><span class="line">|____README.md</span><br><span class="line">|____spec</span><br><span class="line">| |____inputs</span><br><span class="line">| | |____alioss_spec.rb</span><br></pre></td></tr></table></figure><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>使用 <strong>gem</strong> 安装 <strong>aliyun-sdk</strong>、<strong>snappy</strong> 。注意: <strong>aliyun-sdk</strong> 并未使用最新版本，而是使用 0.3.6, 详情戳这里 <a href="https://github.com/aliyun/aliyun-oss-ruby-sdk/issues/40" target="_blank" rel="noopener">issue</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install -v 0.3.6 aliyun-sdk</span><br><span class="line">gem install snappy</span><br></pre></td></tr></table></figure><h1 id="集成-aliyun-sdk"><a href="#集成-aliyun-sdk" class="headerlink" title="集成 aliyun-sdk"></a>集成 <strong>aliyun-sdk</strong></h1><p>编辑 <em>logstash-input-alioss.gemspec</em>，添加依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add_runtime_dependency 'aliyun-sdk', '~&gt; 0.3.6'</span><br><span class="line">s.add_runtime_dependency 'snappy'</span><br></pre></td></tr></table></figure><h1 id="打包工程"><a href="#打包工程" class="headerlink" title="打包工程"></a>打包工程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle install</span><br></pre></td></tr></table></figure><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>安装插件可以分成两种，开发模式、生产模式。参考<a href="https://github.com/Wondermall/logstash-input-google-cloud-pubsub" target="_blank" rel="noopener">这里</a></p><h2 id="1-开发模式"><a href="#1-开发模式" class="headerlink" title="1. 开发模式"></a>1. 开发模式</h2><p>修改 <em>logstash/Gemfile</em> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'gem "logstash-input-alioss", :path =&gt; "logstash-input-alioss绝对路径"' &gt;&gt; logstash路径/Gemfile</span><br></pre></td></tr></table></figure><p>命令行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash-plugin install --no-verify</span><br></pre></td></tr></table></figure><h2 id="2-生产模式"><a href="#2-生产模式" class="headerlink" title="2. 生产模式"></a>2. 生产模式</h2><p>执行下面命令，会在工程下生成 <em>logstash-input-alioss-0.1.0.gem</em> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem build logstash-input-alioss.gemspec</span><br></pre></td></tr></table></figure><p>命令行安装 (别急，这个过程可能会需要多等一会)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash-plugin install /path/to/logstash-input-alioss-0.1.0.gem</span><br></pre></td></tr></table></figure><h2 id="3-检查插件是否安装成功"><a href="#3-检查插件是否安装成功" class="headerlink" title="3. 检查插件是否安装成功"></a>3. 检查插件是否安装成功</h2><p>不论以上哪种方法，安装成功的话都会出现在列表中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash-plugin list --group input</span><br></pre></td></tr></table></figure><h1 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h1><p><em>alioss.logstash.conf</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    alioss &#123;</span><br><span class="line">        endpoint =&gt; <span class="string">'your endpoint'</span></span><br><span class="line">        access_key_id =&gt; <span class="string">'your access_key_id'</span></span><br><span class="line">        access_key_secret =&gt; <span class="string">'your access_key_secret'</span></span><br><span class="line">        bucket =&gt; <span class="string">'your bucket'</span></span><br><span class="line">        interval =&gt; <span class="number">60</span></span><br><span class="line">        codec =&gt; json</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec=&gt;rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试插件"><a href="#测试插件" class="headerlink" title="测试插件"></a>测试插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -f alioss.logstash.conf</span><br></pre></td></tr></table></figure><h1 id="介绍一个以-aliyun-oss-做为数据源处理日志的插件"><a href="#介绍一个以-aliyun-oss-做为数据源处理日志的插件" class="headerlink" title="介绍一个以 aliyun/oss 做为数据源处理日志的插件"></a>介绍一个以 aliyun/oss 做为数据源处理日志的插件</h1><p><a href="https://github.com/Ryfthink/logstash-input-alioss" target="_blank" rel="noopener">https://github.com/Ryfthink/logstash-input-alioss</a></p>]]></content>
      
      <categories>
          
          <category> devOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Logstash 之 filebeats</title>
      <link href="/2017/03/17/filebeats-in-logstash/"/>
      <url>/2017/03/17/filebeats-in-logstash/</url>
      <content type="html"><![CDATA[<h1 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h1><ol><li><p><a href="https://www.elastic.co/downloads/beats/filebeat" target="_blank" rel="noopener">Download filebeats</a></p></li><li><p>配置 filebeat.yml</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filebeat.<span class="symbol">prospectors:</span></span><br><span class="line">- <span class="symbol">input_type:</span> log</span><br><span class="line"><span class="symbol">paths:</span></span><br><span class="line">- <span class="regexp">/var/log</span><span class="regexp">/simple.log</span></span><br><span class="line"><span class="regexp">output.logstash:</span></span><br><span class="line"><span class="regexp">hosts: ["localhost:5043"]</span></span><br></pre></td></tr></table></figure></li><li><p>执行 <code>sudo ./filebeat -e -c filebeat.yml -d &quot;publish&quot;</code>， <strong>filebeat</strong> 会一直尝试连接 5043 端口</p></li><li><p>配置 logstash.conf</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">beats &#123;</span><br><span class="line">port =&gt; <span class="string">"5043"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证配置是否合法 <code>logstash -f logstash.conf --config.test_and_exit</code></p></li><li><p>启动 Logstash <code>logstash -f logstash.conf --config.reload.automatic</code>，这时会看到 <strong>simple.log</strong> 的日志被逐个输出<br>添加 <code>--config.reload.automatic</code> 参数，当修改 <code>logstash.conf</code> 时，logstash 会自动重启</p></li><li><p>向 <strong>simple.log</strong> 追加一条日志 <code>echo &quot;这是一条追加日志&quot; &gt;&gt; logstash-tutorial.log</code>，可以看到 logstash 输出了新追加的内容</p></li></ol><h1 id="Apache-日志加工"><a href="#Apache-日志加工" class="headerlink" title="Apache 日志加工"></a>Apache 日志加工</h1><ol><li><p>配置 logstash.conf</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">beats &#123;</span><br><span class="line">port =&gt; <span class="string">"5043"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"><span class="comment"># apache 日志过滤</span></span><br><span class="line">grok &#123;</span><br><span class="line">match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;COMBINEDAPACHELOG&#125;"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 通过 ip 确认经纬度</span></span><br><span class="line">geoip &#123;</span><br><span class="line">source =&gt; <span class="string">"clientip"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>停止 filebeat ，删除 filebeat/data 文件，该文件记录了之前读取记录，所以需要删除掉</p></li><li><p>重新启动 filebeat <code>sudo ./filebeat -e -c filebeat.yml -d &quot;publish&quot;</code></p></li><li><p>向 <strong>simple.log</strong> 追加一条 apache 日志    </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.63.9.126 - - [04/Jan/2016:05:13:42 +0000] &quot;PUT /septenary/api/user/update HTTP/1.1&quot; 200 203023 &quot;http://septenary.cn/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36&quot;</span><br></pre></td></tr></table></figure></li><li><p>logstash 输出类似以下内容</p></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"request"</span> =&gt; <span class="string">"/presentations/logstash-monitorama-2013/images/kibana-search.png"</span>,</span><br><span class="line"><span class="string">"agent"</span> =&gt; <span class="string">"\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\""</span>,</span><br><span class="line"><span class="string">"geoip"</span> =&gt; &#123;</span><br><span class="line"><span class="string">"timezone"</span> =&gt; <span class="string">"Europe/Moscow"</span>,</span><br><span class="line"><span class="string">"ip"</span> =&gt; <span class="string">"83.149.9.216"</span>,</span><br><span class="line"><span class="string">"latitude"</span> =&gt; <span class="number">55.7485</span>,</span><br><span class="line"><span class="string">"continent_code"</span> =&gt; <span class="string">"EU"</span>,</span><br><span class="line"><span class="string">"city_name"</span> =&gt; <span class="string">"Moscow"</span>,</span><br><span class="line"><span class="string">"country_code2"</span> =&gt; <span class="string">"RU"</span>,</span><br><span class="line"><span class="string">"country_name"</span> =&gt; <span class="string">"Russia"</span>,</span><br><span class="line"><span class="string">"country_code3"</span> =&gt; <span class="string">"RU"</span>,</span><br><span class="line"><span class="string">"region_name"</span> =&gt; <span class="string">"Moscow"</span>,</span><br><span class="line"><span class="string">"location"</span> =&gt; [</span><br><span class="line">[<span class="number">0</span>] <span class="number">37.6184</span>,</span><br><span class="line">[<span class="number">1</span>] <span class="number">55.7485</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"postal_code"</span> =&gt; <span class="string">"101194"</span>,</span><br><span class="line"><span class="string">"longitude"</span> =&gt; <span class="number">37.6184</span>,</span><br><span class="line"><span class="string">"region_code"</span> =&gt; <span class="string">"MOW"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"offset"</span> =&gt; <span class="number">650</span>,</span><br><span class="line"><span class="string">"auth"</span> =&gt; <span class="string">"-"</span>,</span><br><span class="line"><span class="string">"ident"</span> =&gt; <span class="string">"-"</span>,</span><br><span class="line"><span class="string">"input_type"</span> =&gt; <span class="string">"log"</span>,</span><br><span class="line"><span class="string">"verb"</span> =&gt; <span class="string">"GET"</span>,</span><br><span class="line"><span class="string">"source"</span> =&gt; <span class="string">"/Users/renyufeng/Documents/ES/practice-logstash/log/simple.log"</span>,</span><br><span class="line"><span class="string">"message"</span> =&gt; <span class="string">"83.149.9.216 - - [04/Jan/2015:05:13:42 +0000] \"GET /presentations/logstash-monitorama-2013/images/kibana-search.png HTTP/1.1\" 200 203023 \"http://semicomplete.com/presentations/logstash-monitorama-2013/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\""</span>,</span><br><span class="line"><span class="string">"type"</span> =&gt; <span class="string">"log"</span>,</span><br><span class="line"><span class="string">"tags"</span> =&gt; [</span><br><span class="line">[<span class="number">0</span>] <span class="string">"beats_input_codec_plain_applied"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"referrer"</span> =&gt; <span class="string">"\"http://semicomplete.com/presentations/logstash-monitorama-2013/\""</span>,</span><br><span class="line"><span class="string">"@timestamp"</span> =&gt; <span class="number">2017</span>-<span class="number">03</span>-<span class="number">10</span><span class="symbol">T08:</span>09<span class="symbol">:</span><span class="number">49.065</span>Z,</span><br><span class="line"><span class="string">"response"</span> =&gt; <span class="string">"200"</span>,</span><br><span class="line"><span class="string">"bytes"</span> =&gt; <span class="string">"203023"</span>,</span><br><span class="line"><span class="string">"clientip"</span> =&gt; <span class="string">"83.149.9.216"</span>,</span><br><span class="line"><span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"beat"</span> =&gt; &#123;</span><br><span class="line"><span class="string">"hostname"</span> =&gt; <span class="string">"renyufengdeMacBook-Pro.local"</span>,</span><br><span class="line"><span class="string">"name"</span> =&gt; <span class="string">"renyufengdeMacBook-Pro.local"</span>,</span><br><span class="line"><span class="string">"version"</span> =&gt; <span class="string">"5.2.2"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"host"</span> =&gt; <span class="string">"renyufengdeMacBook-Pro.local"</span>,</span><br><span class="line"><span class="string">"httpversion"</span> =&gt; <span class="string">"1.1"</span>,</span><br><span class="line"><span class="string">"timestamp"</span> =&gt; <span class="string">"04/Jan/2015:05:13:42 +0000"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="索引日志到-ElasticSearch-中"><a href="#索引日志到-ElasticSearch-中" class="headerlink" title="索引日志到 ElasticSearch 中"></a>索引日志到 ElasticSearch 中</h1><ol><li><p>配置 logstash.conf</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">beats &#123;</span><br><span class="line">port =&gt; <span class="string">"5043"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">grok &#123;</span><br><span class="line">match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;COMBINEDAPACHELOG&#125;"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">geoip &#123;</span><br><span class="line">source =&gt; <span class="string">"clientip"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts =&gt; [ <span class="string">"localhost:9200"</span> ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动以下服务</p><ul><li>重启 filebeat</li><li>启动 elasticsearch</li><li>启动 kibana</li></ul></li><li><p>此时运行的服务如下图<br><img src="http://assets.septenary.cn/user/1/image/0759c26c-01f2-4867-dd9d-6d4917eee384" alt=""></p></li><li><p>查看 elasticsearch 所有索引 <code>curl -XGET &#39;localhost:9200/_cat/indices?v&amp;pretty&#39;</code></p></li><li><p>通过索引名查询入库的日志 <code>curl -XGET &#39;localhost:9200/logstash-2017.03.10/_search?pretty&#39;</code></p></li><li><p>同样可以在 kibana 上查看</p></li></ol><p><a href="https://www.elastic.co/guide/en/logstash/current/advanced-pipeline.html" target="_blank" rel="noopener">官方指南</a></p>]]></content>
      
      <categories>
          
          <category> devOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Logstash 插件集成</title>
      <link href="/2017/03/16/how-to-intergration-logstash-plugin-2/"/>
      <url>/2017/03/16/how-to-intergration-logstash-plugin-2/</url>
      <content type="html"><![CDATA[<h1 id="1-模板工具生成插件项目"><a href="#1-模板工具生成插件项目" class="headerlink" title="1.模板工具生成插件项目"></a>1.模板工具生成插件项目</h1><p><code>logstash-plugin generate --type input --name alioss --path ./</code></p><p>目录结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|____CHANGELOG.md</span><br><span class="line">|____CONTRIBUTORS</span><br><span class="line">|____DEVELOPER.md</span><br><span class="line">|____Gemfile</span><br><span class="line">|____Gemfile.lock</span><br><span class="line">|____lib</span><br><span class="line">| |____logstash</span><br><span class="line">| | |____inputs</span><br><span class="line">| | | |____alioss.rb</span><br><span class="line">|____LICENSE</span><br><span class="line">|____logstash-input-alioss.gemspec</span><br><span class="line">|____Rakefile</span><br><span class="line">|____README.md</span><br><span class="line">|____spec</span><br><span class="line">| |____inputs</span><br><span class="line">| | |____alioss_spec.rb</span><br></pre></td></tr></table></figure><h1 id="2-安装使用-jruby"><a href="#2-安装使用-jruby" class="headerlink" title="2.安装使用 jruby"></a>2.安装使用 <strong>jruby</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rvm install jruby-9.1.7.0</span><br><span class="line">rvm use jruby-9.1.7.0 --default</span><br></pre></td></tr></table></figure><h1 id="3-安装-bundler"><a href="#3-安装-bundler" class="headerlink" title="3.安装 bundler"></a>3.安装 <strong>bundler</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install bundler</span><br></pre></td></tr></table></figure><h1 id="4-gem-安装-aliyun-sdk"><a href="#4-gem-安装-aliyun-sdk" class="headerlink" title="4.gem 安装 aliyun-sdk"></a>4.<strong>gem</strong> 安装 <strong>aliyun-sdk</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install -v 0.3.6 aliyun-sdk</span><br></pre></td></tr></table></figure><h1 id="5-集成-aliyun-sdk，"><a href="#5-集成-aliyun-sdk，" class="headerlink" title="5.集成 aliyun-sdk，"></a>5.集成 <strong>aliyun-sdk</strong>，</h1><p>编辑 <em>logstash-input-alioss.gemspec</em>，添加依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.add_runtime_dependency 'aliyun-sdk', '~&gt; 0.3.6'</span><br></pre></td></tr></table></figure><h1 id="6-打包工程"><a href="#6-打包工程" class="headerlink" title="6.打包工程"></a>6.打包工程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle install</span><br></pre></td></tr></table></figure><h1 id="7-修改-logstash-Gemfile"><a href="#7-修改-logstash-Gemfile" class="headerlink" title="7.修改 logstash/Gemfile"></a>7.修改 <em>logstash/Gemfile</em></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'gem "logstash-input-alioss", :path =&gt; "logstash-input-alioss绝对路径"' &gt;&gt; logstash路径/Gemfile</span><br></pre></td></tr></table></figure><h1 id="8-安装插件"><a href="#8-安装插件" class="headerlink" title="8.安装插件"></a>8.安装插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash-plugin install --no-verify</span><br></pre></td></tr></table></figure><h1 id="9-测试插件"><a href="#9-测试插件" class="headerlink" title="9.测试插件"></a>9.测试插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -e 'input &#123; alioss &#123; &#125; &#125; output &#123; stdout &#123;codec=&gt;rubydebug&#125; &#125;'</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> devOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Logstash 插件集成(简易版)</title>
      <link href="/2017/03/14/how-to-intergration-logstash-plugin-1/"/>
      <url>/2017/03/14/how-to-intergration-logstash-plugin-1/</url>
      <content type="html"><![CDATA[<p>1.切换到插件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> logstash-5.2.2/vendor/bundle/jruby/1.9/gems/</span><br></pre></td></tr></table></figure><p>2.生成模板插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash-plugin generate --type filter --name alioss --path ./</span><br></pre></td></tr></table></figure><p>3.配置 <strong>logstash-5.2.2/Gemfile</strong> 文件，添加一条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem "logstash-filter-alioss", :path =&gt; "vendor/bundle/jruby/1.9/gems/logstash-filter-alioss"</span><br></pre></td></tr></table></figure><p>4.验证 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -e 'input &#123; stdin &#123; &#125; &#125; filter &#123; alioss&#123; &#125; &#125; output &#123; stdout &#123;codec=&gt;rubydebug&#125; &#125;'</span><br></pre></td></tr></table></figure><p>会得到如下结果</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"@timestamp"</span> =&gt; <span class="number">2017</span>-<span class="number">03</span>-<span class="number">14</span><span class="symbol">T09:</span><span class="number">32</span><span class="symbol">:</span><span class="number">23.423</span>Z,</span><br><span class="line"><span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"host"</span> =&gt; <span class="string">"renyufengdeMacBook-Pro.local"</span>,</span><br><span class="line"><span class="string">"message"</span> =&gt; <span class="string">"Hello World!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac 终端每日格言</title>
      <link href="/2017/03/03/daily-motto-on-mac/"/>
      <url>/2017/03/03/daily-motto-on-mac/</url>
      <content type="html"><![CDATA[<h1 id="1-用-brew-安装-fortune"><a href="#1-用-brew-安装-fortune" class="headerlink" title="1.用 brew 安装 fortune"></a>1.用 brew 安装 fortune</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install fortune</span><br></pre></td></tr></table></figure><h1 id="2-安装语言库"><a href="#2-安装语言库" class="headerlink" title="2.安装语言库"></a>2.安装语言库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone git@github.com:ruanyf/fortunes.git</span><br></pre></td></tr></table></figure><h1 id="3-生成索引文件"><a href="#3-生成索引文件" class="headerlink" title="3. 生成索引文件"></a>3. 生成索引文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> strfile fortunes/data/fortunes</span><br><span class="line"><span class="meta">$</span> strfile fortunes/data/chinese</span><br><span class="line"><span class="meta">$</span> strfile fortunes/data/tang300</span><br><span class="line"><span class="meta">$</span> strfile fortunes/data/song100</span><br></pre></td></tr></table></figure><h1 id="4-编辑-zshrc"><a href="#4-编辑-zshrc" class="headerlink" title="4. 编辑 ~/.zshrc"></a>4. 编辑 <strong>~/.zshrc</strong></h1><p>那么每次启动 shell 窗口，就会自动跳出一句格言。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo</span><br><span class="line">echo "=============== Quote Of The Day ==============="</span><br><span class="line">echo</span><br><span class="line">fortune 25% fortunes/data/fortunes 25% fortunes/data/chinese 25% fortunes/data/tang300 25% fortunes/data/song100</span><br><span class="line">echo</span><br><span class="line">echo "================================================"</span><br><span class="line">echo</span><br></pre></td></tr></table></figure><h1 id="5-制作语言包"><a href="#5-制作语言包" class="headerlink" title="5. 制作语言包"></a>5. 制作语言包</h1><p><a href="http://www.ruanyifeng.com/blog/2015/04/fortune.html" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MEAN 栈实践之 在 CVM、AWS 上部署小记</title>
      <link href="/2017/03/02/mean-practice-on-cvm-aws/"/>
      <url>/2017/03/02/mean-practice-on-cvm-aws/</url>
      <content type="html"><![CDATA[<p>简单记录了当初考虑在 <strong>腾讯云</strong> 还是 <strong>AWS</strong> 部署服务的小记，虽然最终还是在 阿里云上部署。。。</p><a id="more"></a><h1 id="Ⅰ-腾讯云-CVM-部署"><a href="#Ⅰ-腾讯云-CVM-部署" class="headerlink" title="Ⅰ. 腾讯云 CVM 部署"></a>Ⅰ. 腾讯云 CVM 部署</h1><p>考虑数据库与服务器配置在同一主机上，勾选磁盘空间</p><h2 id="配置-ssh-公钥"><a href="#配置-ssh-公钥" class="headerlink" title="配置 ssh 公钥"></a>配置 ssh 公钥</h2><p>1.本地 <code>ssh-keygen</code> 生成密钥, 在 <code>~/.ssh/config</code> 中添访问配置</p><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host qcloud</span><br><span class="line">HostName 公网IP</span><br><span class="line">User root</span><br><span class="line">Port 22</span><br><span class="line">IdentityFile ~/.ssh/qcloud_rsa</span><br></pre></td></tr></table></figure></code></pre><p>2.在云主机配置公钥<br>3.连接云主机 <code>ssh qcloud</code></p><h2 id="MongoDB-的安装"><a href="#MongoDB-的安装" class="headerlink" title="MongoDB 的安装"></a>MongoDB 的安装</h2><p>1.连接云主机</p><p>2.编辑 <code>/etc/yum.repos.d/mongodb-org-3.4.repo</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><br></pre></td></tr></table></figure><p>3.执行 <code>sudo yum install -y mongodb-org</code> 进行安装</p><p>4.对于类 <strong>SELinux</strong> 系统 ，需要置成 <strong>disabled</strong></p><p>5.<strong>mongod</strong> 操作: <code>sudo service mongod</code> + <code>start</code> , <code>stop</code> , <code>restart</code></p><p>6.配置开机自启动 <code>sudo chkconfig mongod on</code></p><hr><h1 id="Ⅱ-AWS-部署"><a href="#Ⅱ-AWS-部署" class="headerlink" title="Ⅱ. AWS 部署"></a>Ⅱ. AWS 部署</h1><h2 id="安全组配置"><a href="#安全组配置" class="headerlink" title="安全组配置"></a>安全组配置</h2><table><thead><tr><th>类型</th><th>协议</th><th>端口范围</th><th>来源</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>0.0.0.0/0</td></tr><tr><td>所有 ICMP</td><td>全部</td><td>不适用</td><td>0.0.0.0/0</td></tr></tbody></table><h2 id="退出-SSH-继续运行程序"><a href="#退出-SSH-继续运行程序" class="headerlink" title="退出 SSH 继续运行程序"></a>退出 SSH 继续运行程序</h2><ol><li>执行 <code>screen</code> 进入子界面</li><li>执行程序 <code>sudo node ./bin/www</code></li><li><code>ctrl + A</code> 后键入 <code>D</code> 退出子界面</li><li>退出 SSH，程序会继续运行</li><li><p>再次连接 SSH，执行 <code>screen -ls</code> 查看由screen维护的进程id</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">There is a screen on:</span><br><span class="line">20232.pts-0.ip-172-31-30-2(01/19/17 07:24:36)(Detached)</span><br><span class="line">1 Socket in /var/run/screen/S-ubuntu.</span><br></pre></td></tr></table></figure></li><li><p><code>screen -r 20232.pts-0.ip-172-31-30-2</code> 进入子界面管理 node 进程</p></li></ol><h2 id="使用PM2管理程序"><a href="#使用PM2管理程序" class="headerlink" title="使用PM2管理程序"></a>使用PM2管理程序</h2><ol><li>安装pm2 <code>[sudo] npm install pm2 -g</code></li><li><p>创建一个apps.json，然后通过pm2 start apps.json来启动apps.json里面定义的apps，该文件就是一个json格式的配置文件，告诉pm2该怎么去启动app，启动哪些app。比如：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">"name":"your app name",</span><br><span class="line">"script":"the script to start your app",</span><br><span class="line">"cwd":"change working directory", // 指定该app工作目录，这样pm2会相对这个目录去找脚本之类的。</span><br><span class="line">"error_file":"app-err.log",</span><br><span class="line">"out_file":"app-out.log",</span><br><span class="line">"pid_file":"app.pid",</span><br><span class="line">"one_launch_only":"true",</span><br><span class="line">"env": &#123;</span><br><span class="line">"NODE_ENV":"production"</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li><p><a href="http://www.jianshu.com/p/fdc12d82b661" target="_blank" rel="noopener">参考</a></p></li></ol><h2 id="保证-mongod-在-nodejs-前启动"><a href="#保证-mongod-在-nodejs-前启动" class="headerlink" title="保证 mongod 在 nodejs 前启动"></a>保证 mongod 在 nodejs 前启动</h2><p><a href="http://antrikshy.com/blog/run-mongodb-automatically-nodejs-project" target="_blank" rel="noopener">Link</a></p>]]></content>
      
      <categories>
          
          <category> devOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> devOps </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Effective Java》读书笔记</title>
      <link href="/2016/05/01/effective-java-learning/"/>
      <url>/2016/05/01/effective-java-learning/</url>
      <content type="html"><![CDATA[<h2 id="1-考虑用静态工厂方法代替构造器"><a href="#1-考虑用静态工厂方法代替构造器" class="headerlink" title="1.考虑用静态工厂方法代替构造器"></a>1.考虑用静态工厂方法代替构造器</h2><p>当一个类需要多个带有相同签名的构造器时，就用静态工厂方法代替多个构造器，并且慎重的选择名称以便突出他们之前的区别。</p><p>静态工厂相对构造器的三大优势：</p><ol><li>静态工厂方法都有名称</li><li>不必在每次调用都创建一个新的对象（对象的复用）</li><li>可以返回类型的任意子类型对象 （多态性）</li></ol><a id="more"></a><p>静态工厂惯用名称：</p><ol><li>valueOf</li><li>of (valueOf 更简洁用法)</li><li>getInstance</li><li>newInstance</li><li>getType</li><li>newType</li></ol><h2 id="2-遇到多个构造器参数时考虑使用构建模式"><a href="#2-遇到多个构造器参数时考虑使用构建模式" class="headerlink" title="2.遇到多个构造器参数时考虑使用构建模式"></a>2.遇到多个构造器参数时考虑使用构建模式</h2><p>构造器模式。详见构造器博客。</p><h2 id="3-用私有构造器或者枚举类型强化Singleton属性"><a href="#3-用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="3.用私有构造器或者枚举类型强化Singleton属性"></a>3.用私有构造器或者枚举类型强化Singleton属性</h2><p>单例模式的使用。 最基本就是用私有构造器来保证实例不会被构造。 除此之外，枚举是一种很优雅的单例模式实现方法。</p><p>单例模式三种实现方式：</p><ol><li>公有域</li><li>公有静态方法 （推荐）</li><li>包含单个元素的枚举类型 （强烈推荐）</li></ol><h2 id="4-通过私有构造器强化不可实例化的能力"><a href="#4-通过私有构造器强化不可实例化的能力" class="headerlink" title="4.通过私有构造器强化不可实例化的能力"></a>4.通过私有构造器强化不可实例化的能力</h2><p>同上。主要还阐明了对于一些不希望实例化的类，例如静态工具类也应该将构造方法申明为静态的强化其不可实例化的能力。</p><h2 id="5-避免创建不必要的对象"><a href="#5-避免创建不必要的对象" class="headerlink" title="5.避免创建不必要的对象"></a>5.避免创建不必要的对象</h2><p>常见的如String池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"hello"</span>;</span><br><span class="line">String b = <span class="string">"hello"</span>;</span><br><span class="line">String c = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">a == b <span class="comment">//true</span></span><br><span class="line">a == c <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>ab共用连接池对象，c为不必要创建出来的对象。</p><p>使用静态工厂也可以避免产生不必要的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Boolean a = <span class="keyword">new</span> Boolean(<span class="string">"true"</span>); <span class="comment">//产生对象</span></span><br><span class="line">Boolean a = Boolean.valueOf(<span class="string">"true"</span>); <span class="comment">//不产生</span></span><br></pre></td></tr></table></figure><p>当心自动装箱以及拆箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Long sum = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    sum += i;  <span class="comment">//自动装箱 形成一个Long对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子就不必要的产生了10000个Long对象。因为long会自动装箱成Long。改进方法为让sum为long类型。</p><p><strong>慎用对象池，维护自己的对象池通常会把代码库弄得很乱，同时增加内存占用，并且还会损害性能。现代的JVM实现具有高度优化的垃圾回收机制，其性能很快就会超过轻量级对象池的性能</strong></p><h2 id="6-消除过期的引用"><a href="#6-消除过期的引用" class="headerlink" title="6.消除过期的引用"></a>6.消除过期的引用</h2><p>清空对象引用的最好办法应该是让包含该引用的变量结束其生命周期。如果正确使用了局部变量那么这种消除操作会自然而然的发生。 除此之外，如果是依赖于程序员自己管理的内存时，应该警惕内存泄露的问题。</p><h2 id="7-避免使用终结方法"><a href="#7-避免使用终结方法" class="headerlink" title="7.避免使用终结方法"></a>7.避免使用终结方法</h2><p><strong>don’t use finalize()</strong></p><h2 id="8-覆盖equals时请遵守通用约定"><a href="#8-覆盖equals时请遵守通用约定" class="headerlink" title="8.覆盖equals时请遵守通用约定"></a>8.覆盖equals时请遵守通用约定</h2><p>当覆盖了equals方法时应保证该方法依然遵循下列的性质。</p><p>equals方法的一些性质(不包含null)：</p><ul><li>自反性：x, x.equals(x) 返回true</li><li>对称性：x,y。x.equals(y) == y.equals(x)</li><li>传递性：x,y,z x.equlas(y) == true 且 y.equals(z) 则 x.equlas(z)</li><li>一致性：只要equals的比较操作在对象中的引用的信息没有被修改，那么多次调用得到结果是一致的</li><li>对于任何非null的引用 x x.equals(null) 返回 false</li></ul><p>实现高质量 equals 方法的诀窍：</p><ol><li>使用==操作符检查 “参数是否为这个对象的引用” 如果是直接返回true。 （性能优化）</li><li>使用instanceof操作符检查 “参数是否为正确的类型”。</li><li>把参数转换成正确的类型 (因为上一条的检查所以可以安全的转换)</li><li>对于该类中的每个“关键”域，检查参数中的域是否与该对象中的对应域相匹配。</li><li>覆盖equals方法时总要覆盖hashCode方法</li><li>不要将equals申明中的Object对象替换为其他已知的类型。（会使方法变成重载，记得使用@override)</li></ol><p><strong>对于既不是float也不是double类型的基本类型域可以直接使用==操作符。对于float域可以使用Float.compare方法，而对于double域，可以调用Double.compare。对于float和double域进行特殊处理是有必要的，因为存在着Float.NaN、-0.0f以及类似的double常量。并且存在着精度的偏差问题。</strong></p><h2 id="9-覆盖equals时总要覆盖hashCode"><a href="#9-覆盖equals时总要覆盖hashCode" class="headerlink" title="9.覆盖equals时总要覆盖hashCode"></a>9.覆盖equals时总要覆盖hashCode</h2><p>如果两个对象根据equals（Object）方法比较是相等的，那么调用这两个对象中任意一个对象的hashCode方法都必须产生相同的整数结果。</p><h2 id="10-始终要覆盖toString"><a href="#10-始终要覆盖toString" class="headerlink" title="10.始终要覆盖toString"></a>10.始终要覆盖toString</h2><p>覆盖toString可以让类打印出更加有用的信息。 个人觉得始终说的有点太绝对，如果你坚信自己这个类不会被打印出来，那么还是没有必要去覆盖的。</p><h2 id="11-谨慎地覆盖clone"><a href="#11-谨慎地覆盖clone" class="headerlink" title="11.谨慎地覆盖clone"></a>11.谨慎地覆盖clone</h2><p>不要使用clone，请自己实现深拷贝。</p><h2 id="12-考虑实现Compareable接口"><a href="#12-考虑实现Compareable接口" class="headerlink" title="12.考虑实现Compareable接口"></a>12.考虑实现Compareable接口</h2><p>CompareTo的通用约定与equasls方法的相似：</p><ol><li>确保 a.compareTo(b) == - b.compareTo(a) 当且仅当a.compareTo(b) 抛出异常时 b.compareTo(a) 抛出异常。</li><li>可传递： a.compareTo(b) &gt; 0 &amp;&amp; b.compareTo(z) &gt; 0 =&gt; a.compareTo(z) &gt; 0</li><li>强烈建议 a.compareTo(b) == 0 =&gt; x.equlas(b)</li></ol><p>compareTo的比较要确保结果不会越界： return Integer.compare(a,b) 而不是 return a - b // 可能会溢出</p><h2 id="13-使类和成员的可访问性最小化"><a href="#13-使类和成员的可访问性最小化" class="headerlink" title="13.使类和成员的可访问性最小化"></a>13.使类和成员的可访问性最小化</h2><p>如果类或者接口能被做到包级私有的，它就应该被做成包级私有的。通过把类或者接口做成包级私有的，它实际上成了这个包实现的一部分，而不是该包导出API的一部分，在以后发行版本中，可以对它进行修改、替换、或者删除，而无需担心会影响到现有的客户端。</p><p>另外记住，实例域不能是公有的。如果域是非final的或者是指向一个可改变对象final引用。那么一旦使这个域为公有的，就放弃了对存储在这个域中值进行限制的能力，这意味着你也放弃了强制这个域不可变的能力。</p><h2 id="14-在公有类中使用访问方法而非公有域"><a href="#14-在公有类中使用访问方法而非公有域" class="headerlink" title="14.在公有类中使用访问方法而非公有域"></a>14.在公有类中使用访问方法而非公有域</h2><p>getter、setter意义： 如果类可以在它所在的包外部进行方法，就提供访问方法，以保留将来改变该类内部表示法的灵活性。如果公有类暴露了它的数据域，要想在在将来改变其内部方法是不可能的，因为公有类客户端代码已经遍布各处了。</p><h2 id="15-使可变性最小"><a href="#15-使可变性最小" class="headerlink" title="15.使可变性最小"></a>15.使可变性最小</h2><p>为了使类成为不可变的，要遵循下面五条规则：</p><ol><li>不要提供任何修改对象状态的方法</li><li>保证类不会被扩展</li><li>使所有的域都是final的</li><li>使所有的域都是私有的</li><li>确保对于任何可变组件的互斥访问。如果类有指向可变对象的域要确保该对象不被客户端引用</li><li>不可变对象本质是线程安全的，他们不需要同步。可以被自由的共享。且可以配合静态工厂方法实现缓存。</li></ol><p><strong>不可变对象的真正唯一缺点是，对于每个不同的值都要创建一个单独对象。创建这种对象可能代价很高。</strong></p><h2 id="16-复合优先于继承"><a href="#16-复合优先于继承" class="headerlink" title="16.复合优先于继承"></a>16.复合优先于继承</h2><p>跨包继承存在危险，当父类改变了，会间接破坏了子类。 只有当子类真正是超类的子类型时，才适合使用继承。即必须有 “is-a” 关系。 否则考虑使用复合（包装类），包装类不仅比子类更加健壮，而且功能也更加强大（更易于扩展）。</p><h2 id="17-要么为继承而设计，并提供文档说明，要么就禁止继承"><a href="#17-要么为继承而设计，并提供文档说明，要么就禁止继承" class="headerlink" title="17.要么为继承而设计，并提供文档说明，要么就禁止继承"></a>17.要么为继承而设计，并提供文档说明，要么就禁止继承</h2><h2 id="18-接口优于抽象类"><a href="#18-接口优于抽象类" class="headerlink" title="18.接口优于抽象类"></a>18.接口优于抽象类</h2><p>实现接口需要重复定义某些方法，这个问题在Java 8 中已经得到解决。但若非用到Java 8的新特性可以考虑引入骨架实现类，减少重复代码。 详情见骨架类笔记。</p><h2 id="19-接口只用于定义类型"><a href="#19-接口只用于定义类型" class="headerlink" title="19.接口只用于定义类型"></a>19.接口只用于定义类型</h2><p>常量接口模式是对接口的不良使用。</p><h2 id="20-类层次优先于标签类"><a href="#20-类层次优先于标签类" class="headerlink" title="20.类层次优先于标签类"></a>20.类层次优先于标签类</h2><p>标签类：用一个域来记录该类的性质 应该使用清晰的类层次而不是硬编码实现。</p><h2 id="21-用函数对象表示策略"><a href="#21-用函数对象表示策略" class="headerlink" title="21.用函数对象表示策略"></a>21.用函数对象表示策略</h2><p>例如Comparator接口。 通过一个类实现了Comparator接口来后传递给Arrays.sort(a,new comp()) 实现一组对象的排序。这就是策略模式，不改变原对象的代码而是生成新策略来改变它的行为。</p><p>相反Comparable接口则需要需要排序的类来实现它的compareTo方法。</p><p>策略类可以使用匿名类，但是请注意使用匿名类时每次调用都会创建一个新的实例。如果反复使用的话可以将其存放在一个私有的静态final域里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Host</span></span>&#123;</span><br><span class="line"><span class="comment">// 无需导出具体策略 , 还可以实现其他接口（Serializable)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StrLenCmp</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; , <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出公有静态域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;String&gt; STRING_LENGTH_COMPARATOR = <span class="keyword">new</span> StrLenCmp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-优先考虑静态成员类"><a href="#22-优先考虑静态成员类" class="headerlink" title="22.优先考虑静态成员类"></a>22.优先考虑静态成员类</h2><p>如果申明成员类不要求访问外围实例，就要始终把static修饰符放在它的声明中，使它成为静态成员类而不是非静态成员类。如果省略了static修饰符，则每个实例都包含一个额外的指向外围对象的引用。保留这份引用需要消耗时间和空间，并且会导致外围实例在符合垃圾回收时却仍然得以保留。</p><h2 id="23-请不要在新代码中使用原生态类型"><a href="#23-请不要在新代码中使用原生态类型" class="headerlink" title="23.请不要在新代码中使用原生态类型"></a>23.请不要在新代码中使用原生态类型</h2><p>使用泛型而不是原生类型。反省有子类型化的规则，List是List的子类型，而不是List的子类型。因此如果使用了List这样的原生态类型，就会失掉类型安全性。</p><p>但是这条规则也有两个小小的例外,这两者都源于“泛型信息可以在运行时被擦除”这一事实。在类文字中必须使用原生态类型。规范不允许使用参数化类型（虽然允许数组类型和基本类型）。即List.class、String[].class和int.class都是合法的，但是List 和 List&lt;?&gt;.class 都是不合法的。</p><p>Set&lt;?&gt; 无限制通配符不允许插入任何元素（除了null）</p><h2 id="24-消除非受检警告"><a href="#24-消除非受检警告" class="headerlink" title="24.消除非受检警告"></a>24.消除非受检警告</h2><p>SuppressWarning(“unchecked”) 消除未受检警告，但是必须自己确保确实这个警告是不必要的。 <strong>永远不要在整个类上使用@SuppressWarnings，尽可能小范围的使用</strong></p><p>你可以在整个方法上使用但也尽量不要而是用在一个局部变量上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line"><span class="keyword">if</span> (a.length &lt; size) &#123;</span><br><span class="line"><span class="meta">@suppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">T[] result = (T[]) Arrays.copyOf(elements,size,a.getClass());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="25-列表优先于数组"><a href="#25-列表优先于数组" class="headerlink" title="25.列表优先于数组"></a>25.列表优先于数组</h2><p>利用数组你会在运行时发现所犯的错误，而利用列表，则可以在编译时发现错误。因为数组是具体化的所以会在运行时才知道并检查他们的元素类型的约束。泛型则是通过擦除来实现的，因此泛型在编译时强化他们的类型信息，并在运行时丢弃（擦除）他们的元素类型信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object[] objectArray = <span class="keyword">new</span> Long[<span class="number">1</span>];</span><br><span class="line">objectArray[<span class="number">0</span>] = <span class="string">"I don't fit in"</span>; <span class="comment">// 运行时抛出异常</span></span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; o1  = <span class="keyword">new</span> ArrayList&lt;Long&gt;(); <span class="comment">// 编译时就抛出</span></span><br><span class="line">o1.add(<span class="string">"I don't fit in"</span>);</span><br></pre></td></tr></table></figure><p>像E、List和List这样的类型被称作不可具体化的类型。直观的说，不可具体化的类型是指其运行时表示法包含的信息比其编译时包含的信息更少。唯一可具体化的参数化类型是无限制的通配符类型，例如List 和 Map。虽然不常用，但是创建无限制通配符类型的数组是合法的。</p><h2 id="26-优先考虑泛型"><a href="#26-优先考虑泛型" class="headerlink" title="26.优先考虑泛型"></a>26.优先考虑泛型</h2><p>记住，你不能创建不可具体化的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E[] e = <span class="keyword">new</span> E[<span class="number">10</span>]; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>因此应该优先考虑使用泛型，即使使代码没有那么简洁，但是更加安全也更加容易。</p><p>27.优先考虑泛型方法<br>理由和上一条类似，更加安全、可靠。</p><p>28.利用有限制通配符来提升API灵活性<br>PECS = producer-extends , consumer-super 原则 如果参数化类型表示一个T生产证，就使用&lt;? extends T&gt; 如果表示的是一个消费者使用&lt;? super T&gt;</p><p>一般来说，如果类型参数只在方法申明中出现一次，就可以用通配符来取代它。如果是无限制的类型参数，就用无限制的通配符来取代它；如果是有限制的类型参数，就用有限制的通配符取代它。</p><h2 id="29-优先考虑类型安全的异构容器"><a href="#29-优先考虑类型安全的异构容器" class="headerlink" title="29.优先考虑类型安全的异构容器"></a>29.优先考虑类型安全的异构容器</h2><p>异构容器是指能够容纳不同类型对象的容器。像我们通常用的List、Map等容器，它们的原生态类型本身就是异构容器，一旦给它们设置了泛型参数，例如List、Map&lt;Integer, String&gt;，它们就不再是异构容器。但是，原生态类型是不安全的，你无法知道从容器取出的类型到底是什么，很容易导致错误。因此，如何构建类型安全的异构容器就成了一个重要的话题。</p><p>使用Map实现类型安全的异构容器 局限性 使用Map实现类型安全的异构容器</p><p>我们将要实现一个Favorites类，用来对每个类型保存一个最喜欢的实例。它的API如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Favorites</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putFavorite</span><span class="params">(Class&lt;T&gt; type, T instance)</span></span>;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getFavorite</span><span class="params">(Class&lt;T&gt; type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个测试程序，说明了如何使用Favorites类保存、获取并打印最喜爱的String、Integer和Class实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Favorites f = <span class="keyword">new</span> Favorites();</span><br><span class="line">  f.putFavorite(String.class, <span class="string">"Java"</span>);</span><br><span class="line">  f.putFavorite(Integer.class, <span class="number">0xcafebabe</span>);</span><br><span class="line">  f.putFavorite(Class.class, Favorites.class);</span><br><span class="line">  String favoriteString = f.getFavorite(String.class);</span><br><span class="line">  <span class="keyword">int</span> favoriteInteger = f.getFavorite(Integer.class);</span><br><span class="line">  Class&lt;?&gt; favoriteClass = f.getFavorite(Class.class);</span><br><span class="line">  System.out.printf(<span class="string">"%s %x %s%n"</span>, favoriteString, favoriteInteger, favoriteClass.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果是 Java cafebabe Favorites Favorite实例是类型安全的，当你向它请求String的时候，它绝不会返回一个Integer给你。同时它也是异构的，它的键可以是任意类型。</p><p>Favorites的实现也很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Favorites</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Object&gt; favorites = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, Object&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putFavorite</span><span class="params">(Class&lt;T&gt; type, T instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Type is null"</span>);</span><br><span class="line">    favorites.put(type, instance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getFavorite</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type.cast(favorites.get(type));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部用一个Map&lt;Class, Object&gt;来保存所有的爱好，使用Class作为键记录每个爱好的类型，而用Object作为值不再区分它们的类型。当取出时，根据请求的类型从Map中查找相应的值，由于值是Object类型的，需要使用type.cast强制转换为type指定的类型。只要客户端按照API的要求使用，这里的强制转换一定不会出错。</p><p>局限性</p><p>这种实现方法有两种局限性。</p><p>首先，恶意的客户端可以破坏Favorites实例的类型安全。如果客户端传入原生态的Class对象和不一致的值对象，则会在getFavorite的cast时抛出ClassCastException异常。不过好在我们可以对这一情况加以约束。只需要在put时使用一个动态的转换就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putFavorite</span><span class="params">(Class&lt;T&gt; type, T instance)</span> </span>&#123;</span><br><span class="line">  favorites.put(type, type.cast(instance));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦客户端传入值类型不一致，就立即抛出异常。</p><p>第二种局限性是它不能用于泛型化类型，例如，你无法把List作为Favorites的键，因为List.class是个语法错误。这一局限性还没有很好的解决方法。</p><h2 id="30-用enum代替int常量"><a href="#30-用enum代替int常量" class="headerlink" title="30.用enum代替int常量"></a>30.用enum代替int常量</h2><p>Java枚举类型背后的基本思想非常简单：他们就是用公有的静态final域为每个枚举常量导出实例的类。因为没有可以访问的构造器，枚举类型是真正的final。 枚举类还有一个好处，你可以增加或者重排列枚举类型中的常量，而无需重新编译它的客户端代码，因为导出常量的域在枚举类型和他的客户端之间提供了一个隔离层：常量值并没有被编译到客户端代码中，而是在int枚举模式中。</p><p><strong>枚举的toString方法返回每个枚举的声明名字。valueOf方法通过名字来获取枚举类,valueOf方法依赖于默认的toString方法因此如果覆盖了toString将不再有用。</strong></p><p>特定于方法的方法实现: 可以在枚举中申明一个抽象方法，这样所有的枚举常量都得实现它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> type&#123;</span><br><span class="line">JSON&#123;</span><br><span class="line"><span class="function">String <span class="title">convert</span><span class="params">(String raw)</span> </span>&#123; </span><br><span class="line"><span class="comment">//...covert in json </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, XML &#123;</span><br><span class="line"><span class="function">String <span class="title">covert</span><span class="params">(String raw)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...convert in xml</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> String <span class="title">convert</span><span class="params">(String raw)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套的枚举：策略枚举模式 假如对于一个枚举每次都得选择一个方法，就想上述的特定于方法的方法实现，但是有很多个枚举他们用的方法是一样的，如果用上述的代码你得重复写很多一样的代码。这个时候可以考虑将方法嵌套在一个内部类中，对于外部枚举每定义一个就选择一个策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PayrollDay &#123;</span><br><span class="line">    MONDAY(PayType.WEEKDAY), </span><br><span class="line">    TUESDAY(PayType.WEEKDAY), </span><br><span class="line">    WEDNESDAY(PayType.WEEKDAY), </span><br><span class="line">    THURADAY(PayType.WEEKDAY), </span><br><span class="line">    FRIDAY(PayType.WEEKDAY), </span><br><span class="line">    SATURDAY(PayType.WEEKEND),</span><br><span class="line">    SUNDAY(PayType.WEEKEND);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PayType payType;</span><br><span class="line">    PayrollDay(PayType payType) &#123;</span><br><span class="line">        <span class="keyword">this</span>.payType = payType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">pay</span><span class="params">(<span class="keyword">double</span> hoursWorked, <span class="keyword">double</span> payRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> payType.pay(hoursWorked, payRate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有嵌套的枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> PayType &#123;</span><br><span class="line">        WEEKDAY &#123;</span><br><span class="line">            <span class="function"><span class="keyword">double</span> <span class="title">pay</span><span class="params">(<span class="keyword">double</span> hoursWorked, <span class="keyword">double</span> payRate)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hoursWorked - HOURS_PER_SHIFT &gt; <span class="number">0</span> </span><br><span class="line">                    ?(hoursWorked*payRate*<span class="number">1.5</span> - <span class="number">0.5</span>*HOURS_PER_SHIFT*payRate) </span><br><span class="line">                    : hoursWorked*payRate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        WEEKEND &#123;</span><br><span class="line">            <span class="function"><span class="keyword">double</span> <span class="title">pay</span><span class="params">(<span class="keyword">double</span> hoursWorked, <span class="keyword">double</span> payRate)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hoursWorked * payRate * <span class="number">1.5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HOURS_PER_SHIFT = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">pay</span><span class="params">(<span class="keyword">double</span> hoursWorked, <span class="keyword">double</span> payRate)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(PayrollDay.MONDAY.pay(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">        System.out.println(PayrollDay.SUNDAY.pay(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="31-用实例域代替序数"><a href="#31-用实例域代替序数" class="headerlink" title="31.用实例域代替序数"></a>31.用实例域代替序数</h2><p>所有枚举类都有一个ordinal方法，它返回枚举常量在类型中的数字位置。<strong>但是永远不要根据枚举的序数导出与它关联的值，你应该将它保存在一个实例域中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Enumble&#123;</span><br><span class="line">SOLE(<span class="number">1</span>),DUET(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> number;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Enumble</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.number = size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="32-用EnumSet代替位域"><a href="#32-用EnumSet代替位域" class="headerlink" title="32.用EnumSet代替位域"></a>32.用EnumSet代替位域</h2><p>如果方法需要传递多个枚举值，使用EnumSet会比用位域来控制更好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Style &#123;BOLD, ITALTC, UNDERLTINE&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyStyles</span><span class="params">(Set&lt;Style&gt; styles)</span> </span>&#123;</span><br><span class="line">        System.out.println(styles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main main = <span class="keyword">new</span> Main();</span><br><span class="line">        main.applyStyles(EnumSet.of(Style.BOLD, Style.ITALTC));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-使用EnumMap代替序数索引"><a href="#33-使用EnumMap代替序数索引" class="headerlink" title="33.使用EnumMap代替序数索引"></a>33.使用EnumMap代替序数索引</h2><p>千万不要使用ordinal来索取枚举类型。可以使用EnumMap来代替索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Style &#123;BOLD, ITALTC, UNDERLTINE&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EnumMap&lt;Style, String&gt; <span class="title">push</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EnumMap&lt;Style, String&gt; enumMap = <span class="keyword">new</span> EnumMap&lt;Style, String&gt;(Style.class);</span><br><span class="line">        enumMap.put(Style.BOLD,<span class="string">"good"</span>);</span><br><span class="line">        enumMap.put(Style.ITALTC,<span class="string">"normal"</span>);</span><br><span class="line">        <span class="keyword">return</span> enumMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main main = <span class="keyword">new</span> Main();</span><br><span class="line">        EnumMap&lt;Style,String&gt; enumMap = main.push();</span><br><span class="line">        System.out.println(enumMap.get(Style.BOLD));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="34-用接口模拟可伸缩的枚举"><a href="#34-用接口模拟可伸缩的枚举" class="headerlink" title="34.用接口模拟可伸缩的枚举"></a>34.用接口模拟可伸缩的枚举</h2><p>虽然枚举类型不是可以扩展的，但是接口是。因此可以利用接口来模拟可以伸缩的枚举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BaseOperation implements Operation &#123;</span><br><span class="line">    PLUS(<span class="string">"+"</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String symbol;</span><br><span class="line"></span><br><span class="line">    BaseOperation(String symbol) &#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以将方法申明为抽象的实现这种伸缩性。（30条）</p><h2 id="35-注解优先于命名模式"><a href="#35-注解优先于命名模式" class="headerlink" title="35.注解优先于命名模式"></a>35.注解优先于命名模式</h2><p>使用合适的注解，会比你对一个方法任何简明的命名更加让人了解它的用途。</p><h2 id="36-坚持使用Override注解"><a href="#36-坚持使用Override注解" class="headerlink" title="36.坚持使用Override注解"></a>36.坚持使用Override注解</h2><p>Override通常能让你避免重载了方法却以为是覆盖了方法。</p><h2 id="37-用标记接口定义类型"><a href="#37-用标记接口定义类型" class="headerlink" title="37.用标记接口定义类型"></a>37.用标记接口定义类型</h2><p>标记接口是没有包含方法申明的接口，而只是指明一个类实现了具有某种属性的接口。例如，考虑Serializable接口，通过实现这个接口，类表明它的实例可以被写到ObjectOutputStream。 <strong>注解以及标记接口区分使用：</strong></p><ul><li>注解：该标记应用到任何元素而不是只给类和接口。因为只有类和接口可以用来或者扩展接口。</li><li>标记接口：只应用给类和接口。</li></ul><h2 id="38-检查参数的有效性"><a href="#38-检查参数的有效性" class="headerlink" title="38.检查参数的有效性"></a>38.检查参数的有效性</h2><p>每当编写方法或者构造器的时候，应该考虑它的参数有哪些限制。应该把这些限制写到文档中，并且在这个方法体的开头处，通过显示的检查来实施这些限制。</p><h2 id="39-必要时进行保护性拷贝"><a href="#39-必要时进行保护性拷贝" class="headerlink" title="39.必要时进行保护性拷贝"></a>39.必要时进行保护性拷贝</h2><p>保护性拷贝是在检查参数的有效性之前进行的，并且有效性检查是针对拷贝之后的对象，而不是针对原始对象。这样做可以避免在检查参数以及拷贝对象参数时间段间原始对象的改变。 使用保护性拷贝主要是预防原始对象的改变而对当前对象造成非预期的异常。所以只要可能就应该尽可能的使用不可变对象。</p><h2 id="40-谨慎设计方法签名"><a href="#40-谨慎设计方法签名" class="headerlink" title="40.谨慎设计方法签名"></a>40.谨慎设计方法签名</h2><ul><li>谨慎地选择方法的名称。</li><li>不要过于追求提供便利的方法。每个方法都应该尽其所能。只有当一个些组合的方法经常被调用时才为他们创建“快捷方式”。</li><li>避免过长的参数。目标是四个或者更少。</li><li>对于参数类型，要优先使用接口而不是类。</li></ul><h2 id="41-慎用重载"><a href="#41-慎用重载" class="headerlink" title="41.慎用重载"></a>41.慎用重载</h2><p>重载方法，要调用哪一个重载方法是在编译时决定的。因此重载方法的选择是静态的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">Collection&lt;?&gt; c = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">classify(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">classify</span><span class="params">(Collection&lt;?&gt; c)</span></span>&#123;</span><br><span class="line"><span class="comment">//打印出这个</span></span><br><span class="line">System.out.println(<span class="string">"collection"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">classify</span><span class="params">(Set&lt;?&gt; s)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"set"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以上面代码只有Collection这个方法会被选中因为在编译时，c对象就是Collection类型。 <strong>需要当心覆盖机制没有成功覆盖而变成了重载，因此要坚持使用@Override</strong></p><h2 id="42-慎用可变参数"><a href="#42-慎用可变参数" class="headerlink" title="42.慎用可变参数"></a>42.慎用可变参数</h2><p>在重视性能的情况下，使用可变参数要小心。可变参数方法的每次调用都会导致进行一次数组分配和初始化。有一个改进办法，为这个方法提供5个重载方法，分别为0个、1个、2个、3个、3个以上参数版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a1)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a1,<span class="keyword">int</span> a2)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a1,<span class="keyword">int</span> a2,<span class="keyword">int</span> a3)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a1,<span class="keyword">int</span> a2,<span class="keyword">int</span> a3, <span class="keyword">int</span>... rest)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>EnumSet类对它的静态工厂使用这种方法，最大限度的减少创建枚举集合的成本。当时这么做是必要的，因为枚举集合为位域提供在性能方面有竞争力的替代方法。</p><h2 id="43-返回零长度的数组或者集合-而不是null"><a href="#43-返回零长度的数组或者集合-而不是null" class="headerlink" title="43.返回零长度的数组或者集合,而不是null"></a>43.返回零长度的数组或者集合,而不是null</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Chesse&gt; <span class="title">getCheeseList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cheeseInStock.isEmpty())&#123;</span><br><span class="line"><span class="comment">// 永远返回同一个对象</span></span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Cheese&gt;(cheeseInStock);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回类型为数组或者集合而不是null，可以避免客户端调用抛出的空指针异常。使用Collections.emptyList等方法可以返回同一个空对象节省对象创建的资源。</p><h2 id="44-为所有导出的API元素编写文档注释"><a href="#44-为所有导出的API元素编写文档注释" class="headerlink" title="44.为所有导出的API元素编写文档注释"></a>44.为所有导出的API元素编写文档注释</h2><p>如果是编写API务必遵守</p><h2 id="45-将局部变量的作用域最小化"><a href="#45-将局部变量的作用域最小化" class="headerlink" title="45.将局部变量的作用域最小化"></a>45.将局部变量的作用域最小化</h2><p>要使局部变量的作用域最小化最有力的方式是在第一次使用它的地方申明，不要提前！ 几乎每个局部变量的申明都应该包含一个初始化表达式。如果你还没有足够的信息来对这个变量进行有意义的初始化，就应该推迟这个申明。</p><p><strong>for循环 以及 while </strong> 如果在循环的终止之后就不再需要使用循环变量的内容应该更优先于使用for。</p><h2 id="46-for-each循环优先于传统的for循环"><a href="#46-for-each循环优先于传统的for循环" class="headerlink" title="46.for-each循环优先于传统的for循环"></a>46.for-each循环优先于传统的for循环</h2><p><strong>利用</strong>for-each循环不会有性能的损失，甚至用数组也一样。</p><p>三种情况不能用for-each：</p><ol><li>过滤 如果需要遍历集合，并删除特定的元素，就需要使用显示的迭代器，以便可以调用它的remove方法。</li><li>转换 如果需要遍历列表或者数组，并取代它部分或者全部的元素值，就需要列表迭代器或者数组索引，以便设定元素的值。</li><li>平行迭代 如果需要并行的遍历多个集合，就需要显示的控制迭代器或者索引变量，以便所有迭代器或者索引变量都可以同步前移。</li></ol><h2 id="47-了解和使用类库"><a href="#47-了解和使用类库" class="headerlink" title="47.了解和使用类库"></a>47.了解和使用类库</h2><p>类库或者第三方库（guava等）拥有的方法应该了解并使用它们而不要亲自造轮子。</p><h2 id="48-如果需要精确的答案，请避免使用float和double"><a href="#48-如果需要精确的答案，请避免使用float和double" class="headerlink" title="48.如果需要精确的答案，请避免使用float和double"></a>48.如果需要精确的答案，请避免使用float和double</h2><p>float以及double不适合用于非常精确的计算。解决办法是使用BigDecimal、int或者long。后面两者不能进行浮点数计算。 此外使用BigDecimal有两个缺点：</p><ol><li>使用不方便</li><li>效率低 但是BigDecimal<strong>可以很方便的控制保留小数</strong>。因此，如果你需要精确答案并且是浮点数类型的请使用BigDecimal。</li></ol><h2 id="49-基本类型优先于装箱基本类型"><a href="#49-基本类型优先于装箱基本类型" class="headerlink" title="49.基本类型优先于装箱基本类型"></a>49.基本类型优先于装箱基本类型</h2><p>基本类型和装箱基本类型的三个主要区别：</p><ol><li>基本类型只有值，装箱类型具有与他们值不同的唯一性——可以具有不同对象但是值相同</li><li>装箱基本类型不仅有功能完备值还有非功能值：null<br>基本类型更加节省空间和时间<br>综上所述如果不是业务需求，更优先考虑基本类型。 使用过程中当心自动装箱、自动拆箱带来的不必要对象创建浪费。</li></ol><h2 id="50-如果其他类型更适合，则尽量避免使用字符串"><a href="#50-如果其他类型更适合，则尽量避免使用字符串" class="headerlink" title="50.如果其他类型更适合，则尽量避免使用字符串"></a>50.如果其他类型更适合，则尽量避免使用字符串</h2><ol><li>字符串不适合代替其他的值类型。应该根据语义使用相对应的值类型</li><li>字符串不适合代替枚举类型</li><li>字符串不适合代替聚集类型，通常可以编写一个私有静态类来表示，而不是使用字符串</li><li>字符串也不适合代替能力表字符串作为键可能会被共享引发不安全</li></ol><h2 id="51-当心字符串连接的性能"><a href="#51-当心字符串连接的性能" class="headerlink" title="51.当心字符串连接的性能"></a>51.当心字符串连接的性能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会被JVM自动转化为StringBuilder</span></span><br><span class="line">String a = <span class="string">"hello"</span> + name + <span class="string">" world"</span>;</span><br><span class="line"><span class="comment">// 不会自动转化</span></span><br><span class="line">String a = <span class="string">"hello"</span>;</span><br><span class="line">a += name;</span><br><span class="line">a += <span class="string">" world"</span>;</span><br></pre></td></tr></table></figure><p>有多行拼接操作记得使用StringBuilder 或者 StringBuffer</p><h2 id="52-通过接口引用对象"><a href="#52-通过接口引用对象" class="headerlink" title="52.通过接口引用对象"></a>52.通过接口引用对象</h2><p>使用接口引用对象，可以利用多态性，提升代码的可维护性。 例如使用List而不是ArrayList 将来发现该链表经常被修改想要改成LinkedList只需修改定义地方就可以了。</p><h2 id="53-接口优先于反射机制"><a href="#53-接口优先于反射机制" class="headerlink" title="53.接口优先于反射机制"></a>53.接口优先于反射机制</h2><p>反射机制是Java一种很强大的机制，但是使用这种能力也是要付出代价的：</p><ol><li>丧失了编译时类型检查的好处。反射是在运行中进行的</li><li>执行反射访问所需的代码非常笨拙和冗长。虽然可以使用第三方库，但是还是略显繁琐</li><li>性能损失。反射方法调用比普通方法慢很多。</li></ol><p>因此，如果你编写的程序是必须要与编译时未知的类一起工作，如有可能就应该仅仅使用反射机制来实例化对象，而访问对象时则使用编译时已知的某个（父类）接口或者超类。 如果是与编译时已知的类一起工作的则不必要使用反射机制。</p><h2 id="54-谨慎地使用本地方法"><a href="#54-谨慎地使用本地方法" class="headerlink" title="54.谨慎地使用本地方法"></a>54.谨慎地使用本地方法</h2><p>JNI允许JAVA应用程序可以调用本地方法。所谓调用本地方法是用本地程序语言（主要是C或者C++）来编写的特殊方法。本地方法在本地语言中可以执行任意的计算任务，并且返回到Java程序设计语言。 历史上使用本地方法主要是希望提升性能。<strong>但是使用本地方法来提升性能的做法不值得提倡。</strong>现在的VM已经非常快了无需再去借助其他语音。并且本地方法还有一些严重的缺点：</p><ol><li>本地语言不是安全的</li><li>不可移植</li><li>使用本地方法的应用程序难以调试</li><li>进入和退出本地方法时需要固定的开销，浪费资源</li><li>需要“胶合代码”的本地方法编写起来单调乏味，并且难以阅读</li></ol><h2 id="55-谨慎地进行优化"><a href="#55-谨慎地进行优化" class="headerlink" title="55.谨慎地进行优化"></a>55.谨慎地进行优化</h2><p>不要因为性能而牺牲合理的结构。需要努力编写好的程序而不是快的程序。如果好的程序不够快，它的结构将使它可以得到优化。好的程序体现了信息隐蔽的原则：只要有可能，它们就会把设计决策集中在单个模块中，因此可以改变单个决策，而不会影响到系统的其他部分。</p><h2 id="56-遵守普遍接受的命名规范"><a href="#56-遵守普遍接受的命名规范" class="headerlink" title="56.遵守普遍接受的命名规范"></a>56.遵守普遍接受的命名规范</h2><p>Java规范 以及 驼峰命名</p><p>57.只针对异常的情况才使用异常<br>不要为了快速、业务去滥用异常，只有在真正异常的情况下才使用他们。</p><h2 id="58-对可恢复的情况使用受检异常，对编程错误使用运行时异常"><a href="#58-对可恢复的情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="58.对可恢复的情况使用受检异常，对编程错误使用运行时异常"></a>58.对可恢复的情况使用受检异常，对编程错误使用运行时异常</h2><p>Java提供了三种可抛出结构：</p><ol><li>受检的异常 —— 可恢复时使用</li><li>运行时异常 —— 编程错误抛出</li><li>错误</li></ol><h2 id="59-避免不必要地使用受检的异常"><a href="#59-避免不必要地使用受检的异常" class="headerlink" title="59.避免不必要地使用受检的异常"></a>59.避免不必要地使用受检的异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    obj.action(args);</span><br><span class="line">&#125;<span class="keyword">catch</span>(TheCheckException e)&#123;</span><br><span class="line">    <span class="comment">//Handle exceptional condition</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重构为</span></span><br><span class="line"><span class="keyword">if</span> (obj.actionPermitted(args)&#123;</span><br><span class="line">    obj.action(args);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//Handle exception condition</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以考虑使受检的异常重构。这样的重构并不总是恰当的。但是在恰当的时候可以使API用起来更加的舒服。</p><h2 id="60-优先使用标准异常"><a href="#60-优先使用标准异常" class="headerlink" title="60.优先使用标准异常"></a>60.优先使用标准异常</h2><p>最常见的可重用异常：</p><table><thead><tr><th>异常</th><th>使用场合</th></tr></thead><tbody><tr><td>IllealArgumentException</td><td>非null到数值不正确</td></tr><tr><td>IllegalStateException</td><td>对于方法的调用而言，对象状态不适合</td></tr><tr><td>NullPointerException</td><td>在禁止使用null的情况下参数值为null</td></tr><tr><td>IndexOutOfBoundsException</td><td>下表参数值越界</td></tr><tr><td>ConcurrentModificationException</td><td>在禁止并发修改的情况下，检查到对象的并发修改</td></tr><tr><td>UnsupportedOperationException</td><td>对象不支持用户请求的方法</td></tr></tbody></table><h2 id="61-抛出与抽象相对应的异常"><a href="#61-抛出与抽象相对应的异常" class="headerlink" title="61.抛出与抽象相对应的异常"></a>61.抛出与抽象相对应的异常</h2><p>想想这样一种情况：方法B抛出了一个受检的异常 ，那么方法A在内部调用方法B时，面对方法B抛出的受检异常，可以选择继续抛出向上传播这个异常， 也可以捕获这个异常进行处理。究竟是向上传播抛出，还是捕获处理呢？ 有一个指导原则是：抛出与抽象相对应的异常。 例如如果方法B抛出了NoSuchElementException这个受检异常，然而在方法A中调用方法B时，根据方法A中的逻辑，当遇到NoSuchElementException 异常时，抛出一个IndexsOutOfBoundsException异常更为合适。那么就不应该选择向上传播抛出NoSuchElementException，而是应该选择捕获NoSuchElementException，然后抛出IndexsOutOfBoundsException。 更高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法称为异常转译（exception translation）。 一种特殊的异常转译形式称为异常链（exception chaining)。 尽管异常转译让异常更加明确。但是如有可能，处理来自底层的异常的最好的做法是，在调用低层方法之前确保它们会成功执行，从而避免它们抛出异常。 有时候，可以在给低层方法传递参数之前，检查更高层方法的参数的有效性，从而避免低层方法抛出异常。 如果无法避免低层异常，次选方案是，让更高层的方法来悄悄地绕开这些异常（方法C调用方法A，那么方法C就是更高层的方法）。那么在高层方法中 调用低层方法时，面对低层方法抛出的受检异常，高层异常可以捕获异常，转化为非受检异常，或者利用某种适当的记录机制（日志）将异常记录下来。 这样更高层的方法C在调用高层方法A是，不用再受来自低层方法的异常烦扰，而异常在高层方法中也得到了处理。</p><h2 id="62-每个方法抛出的异常都要有文档"><a href="#62-每个方法抛出的异常都要有文档" class="headerlink" title="62.每个方法抛出的异常都要有文档"></a>62.每个方法抛出的异常都要有文档</h2><p>使用@thorws标签记录下一个方法可能抛出的每个未受检异常，但是不要使用throws的关键字将未受检异常也包含在方法的申明中。</p><h2 id="63-在细节消息中包含能捕获失败失败的信息"><a href="#63-在细节消息中包含能捕获失败失败的信息" class="headerlink" title="63.在细节消息中包含能捕获失败失败的信息"></a>63.在细节消息中包含能捕获失败失败的信息</h2><p>为了确保在异常的细节消息中包含足够的能捕获失败的信息，一种办法是在异常的构造器而不是字符串细节信息。然后有了这些信息，只要把他们放到消息描述中，就可以自动产生细节消息了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="title">IndexOutBoundException</span><span class="params">(<span class="keyword">int</span> lowerBound,<span class="keyword">int</span> upperBound,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="comment">//Generate a detail message that captures the failure</span></span><br><span class="line"><span class="keyword">super</span>(<span class="string">"Lower bound: "</span> + lowerBound +</span><br><span class="line">  <span class="string">",Upper bound: "</span> + upperBound +</span><br><span class="line">  <span class="string">", Index:"</span>);</span><br><span class="line"><span class="keyword">this</span>.lowerBound = lowerBound;</span><br><span class="line"><span class="keyword">this</span>.upperBound = upperBound;</span><br><span class="line"><span class="keyword">this</span>.index = index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="64-努力使失败保持原子性"><a href="#64-努力使失败保持原子性" class="headerlink" title="64.努力使失败保持原子性"></a>64.努力使失败保持原子性</h2><p>失败的方法调用应该使对象保持在被调用之前的状态。具有这种属性的方法被称为具有失败原子性。 保持失败原子性的方法：</p><ol><li>最简单的方法设计不可变对象,如果对象不必变,那么失败原则性是必然.如果一个操作失败,它可能会组织创建新的对象,但永远不会使已有的对象保持在不一致的状态中,因为每个对象被创建后就处于一致的状态,以后再也不会改变.(实在没看懂)</li><li>对于可变对象上执行操作的方法,获得失败原子性最常见的方法是,在执行操作之前检查参数有效性.使得对象状态被改变之前,先抛出适当异常.类似获取失败原子性的方法,调整计算过程顺序,使得任何可能导致失败的计算部分都在对象被改变之前发生.如果对参数检查只有执行部分计算后才进行,实际上就是上面方法的拓展而已.例如,考虑TreeMap情景,它的元素按照某种特定顺序排列,添加元素时,该元素的类型必须可以利用TreeMap的排序规则和其他元素比较.如果企图添加不正确的元素,在tree以任何方式被修改之前,自然会导致ClassCastException异常.</li><li>不太常用的操作方法,编写一段恢复代码,由它来拦截操作过程中发生的失败,以及使对象回滚到操作开始之前的状态.这种方法主要用于永久性数据结构(存在磁盘中).</li><li>在对象的一份临时拷贝上执行操作,当操作完成在用临时性拷贝的结果代替对象的内容.例如.Collections.sort在执行排序之前,需要把输入列表转到一个数组中,以便降低排序内循环中访问元素的开销.虽然是出于性能考虑,但是及时排序失败,能保证输入列表保持原样.</li></ol><h2 id="65-不要忽略异常"><a href="#65-不要忽略异常" class="headerlink" title="65.不要忽略异常"></a>65.不要忽略异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//don't do that!</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">catch</span>(SomeException e)&#123;</span><br><span class="line"><span class="comment">//empty</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><em>以下为并发笔记，可以参考之前写的并发笔记。因此写的比较简陋。</em></p><hr><h2 id="66-同步访问共享的可变数据"><a href="#66-同步访问共享的可变数据" class="headerlink" title="66.同步访问共享的可变数据"></a>66.同步访问共享的可变数据</h2><p>共享数据记得使用同步操作。或者使用线程安全的类。</p><h2 id="67-避免过度同步"><a href="#67-避免过度同步" class="headerlink" title="67.避免过度同步"></a>67.避免过度同步</h2><p>缩小同步的范围、减小同步的粒度都可以很大程度提升性能。</p><h2 id="68-executor优先于线程"><a href="#68-executor优先于线程" class="headerlink" title="68.executor优先于线程"></a>68.executor优先于线程</h2><p><strong>线程池的选择</strong> 如果编写的是小程序或者轻载的服务器使用Executors.newCachedThreadPool通常是个不错的选择，因为它不需要配置，并且一般情况下能够正确的完成工作。 但是在大负载的产品服务器中，最好使用Executors.newFixedThreadPool，因为它为你提供了一个包含固定线程数目的线程池，或者为了最大限度的控制它，就直接使用ThreadPoolExecutor类。</p><p><strong>定时调度</strong> 虽然timer使用起来更加容易，但是被调度的小城吃executor更加灵活。timer只用一个线程来执行任务，这在面对长期运行的任务时，会影响到定时的准确性。如果timer唯一的线程抛出未被捕获的异常，timer就会停止运行。被调度的线程池支持多个线程，并且优雅的从抛出未受检异常任务中恢复。</p><h2 id="69-并发工具优先于wait和notify"><a href="#69-并发工具优先于wait和notify" class="headerlink" title="69.并发工具优先于wait和notify"></a>69.并发工具优先于wait和notify</h2><p>使用并发工具，优先于wait和notify。 常用工具：</p><ul><li>阻塞队列</li><li>CountDownLatch</li></ul><h2 id="70-线程安全性的文档化"><a href="#70-线程安全性的文档化" class="headerlink" title="70.线程安全性的文档化"></a>70.线程安全性的文档化</h2><p>导出API，应该同时编写好线程安全的文档</p><h2 id="71-慎用延迟初始化"><a href="#71-慎用延迟初始化" class="headerlink" title="71.慎用延迟初始化"></a>71.慎用延迟初始化</h2><p>延迟初始化，最好的建议是“除非绝对必要，否则不要这么做。”</p><h2 id="72-不要依赖于线程调度器"><a href="#72-不要依赖于线程调度器" class="headerlink" title="72.不要依赖于线程调度器"></a>72.不要依赖于线程调度器</h2><p>要编写健壮的、相应良好的、可移植的多线程应用程序，最好的办法是确保可运行线程的平均数量不明显多余处理器的数量。 线程不应该一直处于忙-等的状态，即反复地检查一个共享对象，以等待某些事情发生。你可能会想用方法Thread.yield来让这个线程让出CPU。但是不要企图这可以很好的“修正”这个问题。你可能好不容易的让程序能够工作，但是这样的程序仍然是不可移植的。同一个yield调用在一个JVM实现上能提高性能，而在另一个JVM上实现可能会更差。Thread.yield没有可测试的语义，更好的解决办法是重新构造应用程序，以减少可并发的线程数量。 所以慎用<strong>Thread.yield。</strong></p><p>##73.避免使用线程组</p><p>几乎可以说永远也不要使用线程组。</p><p>##74.谨慎地实现Serializable接口</p><ol><li>实现Serializable接口而付出的最大代价是，一旦一个类被发布，就大大降低了“改变这个类的实现”的灵活性。因为序列化与反序列化版本必须要保持一致。</li><li>实现Serializable的第二个代价是，它增加了出现Bug和安全漏洞的可能性。</li><li>实现Serializable的第三个代价是，随着类发行新的版本，相关的测试负担也增加了。</li></ol><h2 id="75-考虑使用自定义的序列化形式"><a href="#75-考虑使用自定义的序列化形式" class="headerlink" title="75.考虑使用自定义的序列化形式"></a>75.考虑使用自定义的序列化形式</h2><h2 id="76-保护性地编写readObject方法"><a href="#76-保护性地编写readObject方法" class="headerlink" title="76.保护性地编写readObject方法"></a>76.保护性地编写readObject方法</h2><h2 id="77-对于实例控制，枚举类型优先于readResolve"><a href="#77-对于实例控制，枚举类型优先于readResolve" class="headerlink" title="77.对于实例控制，枚举类型优先于readResolve"></a>77.对于实例控制，枚举类型优先于readResolve</h2><h2 id="78-考虑使用序列化代理代替序列化实例"><a href="#78-考虑使用序列化代理代替序列化实例" class="headerlink" title="78.考虑使用序列化代理代替序列化实例"></a>78.考虑使用序列化代理代替序列化实例</h2><p><a href="https://iamjohnnyzhuang.github.io/java/2017/03/29/Effective-Java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%89%AF%E6%9C%AC.html" target="_blank" rel="noopener">原文转自</a></p>]]></content>
      
      <categories>
          
          <category> 它山之石 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>UINPUT 事件注入</title>
      <link href="/2016/01/16/uinput-event-injection/"/>
      <url>/2016/01/16/uinput-event-injection/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>uinput</strong> 是 <strong>Linux Kernel</strong> 的一个模块，是向用户层提供输入接口的子系统。我们可以通过 <strong>uinput</strong> 在 <em>/dev/input/</em> 中创建一个虚拟字符设备并注入事件。本文主要讲解如何使用 <strong>uinput</strong> 实现键盘事件的注入。</p><h2 id="创建设备"><a href="#创建设备" class="headerlink" title="创建设备"></a>创建设备</h2><p>1.<strong>uinput</strong> 通常位于 <em>/dev/uinput</em> 或者 <em>/dev/input/uinput</em> ，终端执行 <code>adb shell ls -al /dev/uinput</code> ，可以看到 </p><blockquote><p>crw-rw—- system  system  10, 223 1970-01-01 08:00 uinput</p></blockquote><p>该文件为系统权限的字符设备，作为一个普通应用程序没有办法访问，所以在访问 <strong>uinput</strong> 之前，先要提权。终端执行 <code>adb shell su &amp;&amp; chmod 666 /dev/uinput</code> 更改字符设备的访问权限，再次执行 <code>adb shell ls -al /dev/uinput</code> 可以看到</p><blockquote><p>crw-rw-rw- system  system  10, 223 1970-01-01 08:00 uinput</p></blockquote><a id="more"></a><p>2.提权后便可以使用 <strong>uinput</strong> 了，以 <strong>只读</strong> 和 <strong>非阻塞</strong> 模式打开它</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uinput.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/uinput"</span>, O_WRONLY | O_NONBLOCK);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    fd = open(<span class="string">"/dev/input/uinput"</span>, O_WRONLY | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.打开后需要配置 <strong>uinput</strong> 哪些类型的输入事件会用到，这些事件定义在 <strong>linux/input.h</strong> 文件中</p><table><thead><tr><th style="text-align:left">宏</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">define EV_SYN 0x00</td><td style="text-align:left">同步事件</td></tr><tr><td style="text-align:left">define EV_KEY 0x01</td><td style="text-align:left">键盘按下和释放事件</td></tr><tr><td style="text-align:left">define EV_REL 0x02</td><td style="text-align:left">相对坐标事件</td></tr><tr><td style="text-align:left">define EV_ABS 0x03</td><td style="text-align:left">绝对坐标事件</td></tr></tbody></table><p>对于键盘事件，进行如下配置（允许发送 key 和 syn 两种类型的事件）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = ioctl(fd, UI_SET_EVBIT, EV_KEY);</span><br><span class="line">ret = ioctl(fd, UI_SET_EVBIT, EV_SYN);</span><br></pre></td></tr></table></figure></p><p>配置哪些按键可以输入（上下左右方向键）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许输入方向键上、下、左、右</span></span><br><span class="line">ret = ioctl(fd, UI_SET_KEYBIT, KEY_UP);</span><br><span class="line">ret = ioctl(fd, UI_SET_KEYBIT, KEY_DOWN);</span><br><span class="line">ret = ioctl(fd, UI_SET_KEYBIT, KEY_LEFT);</span><br><span class="line">ret = ioctl(fd, UI_SET_KEYBIT, KEY_RIGHT);</span><br></pre></td></tr></table></figure></p><p>4.上面已经配置了一些基本特性，接下来介绍结构体 <code>uinput_user_dev</code>，它定义在 <strong>linux/uinput.h</strong> 头文件中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UINPUT_MAX_NAME_SIZE 80</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uinput_user_dev</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[UINPUT_MAX_NAME_SIZE];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_id</span> <span class="title">id</span>;</span></span><br><span class="line">        <span class="keyword">int</span> ff_effects_max;</span><br><span class="line">        <span class="keyword">int</span> absmax[ABS_MAX + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> absmin[ABS_MAX + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> absfuzz[ABS_MAX + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> absflat[ABS_MAX + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中有几个比较重要的字段:</p><ul><li>name 要创建的虚拟设备名称</li><li>id 内部结构体，描述设备的 usb 类型，厂商，产品，版本</li><li>absmin and absmax 整型数组，描述鼠标或触屏事件的阈值</li></ul><p>将虚拟设备的信息写入 <code>fd</code> ，虚拟设备命名为 <strong>uinput-sample</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uinput_user_dev</span> <span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;dev, <span class="number">0</span>, <span class="keyword">sizeof</span>(dev));</span><br><span class="line"><span class="built_in">snprintf</span>(dev.name, UINPUT_MAX_NAME_SIZE, <span class="string">"uinput-sample"</span>); <span class="comment">// 虚拟设备名称</span></span><br><span class="line">dev.id.bustype = BUS_USB; <span class="comment">// udb 类型</span></span><br><span class="line">dev.id.vendor = <span class="number">0x1</span>;</span><br><span class="line">dev.id.product = <span class="number">0x1</span>;</span><br><span class="line">dev.id.version = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">write(fd, &amp;dev, <span class="keyword">sizeof</span>(dev)); <span class="comment">// 写入</span></span><br></pre></td></tr></table></figure></p><p>5.最后，创建配置好的虚拟设备<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = ioctl(fd, UI_DEV_CREATE)</span><br></pre></td></tr></table></figure></p><p>终端执行 <code>adb shell getevent</code> 你会看到虚拟设备 <strong>uinput-sample</strong> 已经创建成功:  <strong>/dev/input/event1</strong></p><blockquote><p>add device 1: /dev/input/event1<br>  name:     “uinput-sample” </p><p>add device 2: /dev/input/event6<br>  name:     “eventserver-Joystick”</p><p>add device 3: /dev/input/event5<br>  name:     “eventserver-Mouse”</p><p>add device 4: /dev/input/event0<br>  name:     “aml_keypad”</p></blockquote><hr><h2 id="事件注入"><a href="#事件注入" class="headerlink" title="事件注入"></a>事件注入</h2><p>创建好了设备，开始注入事件，这里还需介绍一个结构体 <code>input_event</code> ，它定义在 <strong>linux/input.h</strong> 中，其中几个重要的字段：</p><ul><li><code>type</code>:  event 的类型 (EV_KEY, EV_ABS, EV_REL, …),</li><li><code>code</code>:  如果 type 是 EV_KEY 类型，则是 key code；若type是 EV_ABS 或者 EV_REL 类型，则是 x、y轴</li><li><code>value</code>:   如果 type 是 EV_KEY 类型，则 1 (press) 0 (release)；若type是 EV_ABS 或者 EV_REL 类型，则为 x，y 坐标</li></ul><p>声明写入事件的方法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">writeEvent</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> type,<span class="keyword">int</span> code,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;ev, <span class="number">0</span>, <span class="keyword">sizeof</span>(ev));</span><br><span class="line">    ev.type = type;</span><br><span class="line">    ev.code = code;</span><br><span class="line">    ev.value = value;</span><br><span class="line">    <span class="keyword">ssize_t</span> bytes;<span class="comment">// 写入文档的字节数（成功）；-1（出错）</span></span><br><span class="line">    bytes = write(fd, &amp;ev, <span class="keyword">sizeof</span>(struct input_event));</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写入一个键盘方向键事件  <strong>KEY_UP</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">writeEvent(fd,EV_KEY,KEY_UP,<span class="number">1</span>) <span class="comment">// KEY_UP press</span></span><br><span class="line">writeEvent(fd,EV_KEY,KEY_UP,<span class="number">0</span>) <span class="comment">// KEY_UP release</span></span><br></pre></td></tr></table></figure></p><p>将写入的事件同步到虚拟设备<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writeEvent(fd,EV_SYN,SYN_REPORT,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><hr><h2 id="销毁设备"><a href="#销毁设备" class="headerlink" title="销毁设备"></a>销毁设备</h2><p>注入了事件之后需要销毁虚拟设备，调用下面的函数，再次执行 <code>adb shell getevent</code> 你会看到设备已被移除<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">destroy</span><span class="params">(<span class="keyword">int</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = ioctl(fd, UI_DEV_DESTROY);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现 uinput 事件注入步骤就是：<strong>创建虚拟设备-&gt;注入事件-&gt;销毁设备</strong>，上文只是介绍了键盘事件的注入，其实也可以注入鼠标事件，触摸事件等，接下来的文章会介绍到，请大家多多关注。</p><p><strong>参考：</strong><br><a href="https://source.android.com/devices/input/input-device-configuration-files.html" target="_blank" rel="noopener">https://source.android.com/devices/input/input-device-configuration-files.html</a><br><a href="http://thiemonge.org/getting-started-with-uinput" target="_blank" rel="noopener">http://thiemonge.org/getting-started-with-uinput</a><br><a href="https://www.kernel.org/doc/Documentation/input/multi-touch-protocol.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/input/multi-touch-protocol.txt</a><br><a href="http://bitmath.org/code/mtdev/" target="_blank" rel="noopener">http://bitmath.org/code/mtdev/</a><br><a href="http://stackoverflow.com/questions/4386449/send-touch-event-from-adb-to-a-device" target="_blank" rel="noopener">http://stackoverflow.com/questions/4386449/send-touch-event-from-adb-to-a-device</a><br><a href="http://blog.csdn.net/droidphone/article/details/8434768" target="_blank" rel="noopener">http://blog.csdn.net/droidphone/article/details/8434768</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uinput </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 异步处理队列消息分析</title>
      <link href="/2016/01/09/queue-message-in-android/"/>
      <url>/2016/01/09/queue-message-in-android/</url>
      <content type="html"><![CDATA[<p>试想我们有一连串的异步任务需要交给工作线程来做，这种 <strong>“生产者消费者模式”</strong> 可以通过传统 Java API 的 <code>BlockingQueue</code> 来实现，也可以用 Android API 提供的 <code>Handler</code> 和 <code>Looper</code> 来实现，我来简单分析下~</p><a id="more"></a><hr><h1 id="Blocking-Queue"><a href="#Blocking-Queue" class="headerlink" title="Blocking Queue"></a>Blocking Queue</h1><p><code>BlockingQueue</code> 是线程安全的阻塞队列，开启多个线程可以同时竞争 <code>BlockingQueue</code> 的资源而不用担心并发导致的死锁问题，以 <strong>Volley</strong> 分发网络请求的的源代码为例，讲解一下 <code>BlockingQueue</code> 的使用</p><ol><li><p>声明一个处理异步任务的线程 <code>NetworkDispatcher</code>，在其构造器中，传递一个 <code>BlockingQueue&lt;Request&lt;?&gt;&gt;</code> 参数，</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkDispatcher</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetworkDispatcher</span><span class="params">(BlockingQueue&lt;Request&lt;?&gt;&gt; queue,Network network, Cache cache,ResponseDelivery delivery)</span> </span>&#123;</span><br><span class="line">        mQueue = queue;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>run()</code> 方法中定义一个死循环不断的从队列中拿数据并进行处理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        request = (Request)<span class="keyword">this</span>.mQueue.take();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Take a request from the queue.</span></span><br><span class="line">                request = mQueue.take();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mQuit) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        NetworkResponse resonse = <span class="keyword">this</span>.mNetwork.performRequest(request);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行完所有的异步任务需要停止线程，释放资源，这里需要用到线程的中断操作，此时 <code>mQueue</code> 会抛出 <code>InterruptedException</code> 异常，从而使线程结束运行</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mQuit = <span class="keyword">true</span>;</span><br><span class="line">    interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 <strong>length</strong> 个 <code>NetworkDispatcher</code> 实例，将一个阻塞队列 <code>mNetworkQueue</code>分别传递给他们的构造函数，让工作线程竞争队列资源并执行接下来的请求</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create network dispatchers (and corresponding threads) up to the pool size.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDispatchers.length; i++) &#123;</span><br><span class="line">    NetworkDispatcher networkDispatcher = <span class="keyword">new</span> NetworkDispatcher(mNetworkQueue, mNetwork,</span><br><span class="line">            mCache, mDelivery);</span><br><span class="line">    mDispatchers[i] = networkDispatcher;</span><br><span class="line">    networkDispatcher.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>Volley</strong> 的网络请求的分发基本上就是这样实现的，用多个线程处理同一个队列的消息，优先考虑用 <code>BlockingQueue</code>  来实现，这种方式是 <strong>1 对 N</strong> 的处理方式</p><hr><h1 id="Handler-amp-Looper"><a href="#Handler-amp-Looper" class="headerlink" title="Handler &amp; Looper"></a>Handler &amp; Looper</h1><p>有一种应用场景：我们要将用户的按键操作用日志形式记录下来，考虑的文件的写操作，需要用异步完成，而记录按键操作则是将一连串的 <strong>KeyEvent</strong>  交给异步线程来做，用上面讲到的 <code>BlockingQueue</code> 是可以实现的，但在这里我介绍一下 <code>Handler &amp; Looper</code> 是如何帮助我们实现的。</p><p>我们知道 <code>Handler</code> 和 <code>Looper</code> 是 <strong>Android API</strong> 提供的类，创建一个支持 <code>Handler</code> 的异步线程代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Handler mHandler;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mHandler == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mHandler = <span class="keyword">new</span> Handler(Looper.myLooper());      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要向 <code>MyThread</code> 发送消息，只需要调用 <code>getHandler().sendMessage()</code> 就可以，处理完所有消息后仍需要终止线程，释放资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Looper looper = getLooper();</span><br><span class="line">    <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">        looper.quit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上 <strong>Android API</strong> 已经封装了类似的线程 <code>android.os.HandlerThread</code>，它可以帮助我们很好地异步处理队列消息。我们可以将 <strong>Handler</strong> 交给其它 N 个线程来发送消息，最后由有 <code>HandlerThread</code> 消化处理，这是一种 <strong>N 对 1</strong> 的方式。</p><p><strong>根据不同的应用场景来选择以上哪种实现方式是我们应该关注的。</strong></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>深入理解 Android Package Manager 与 Package Installer</title>
      <link href="/2015/12/20/insight-android-pm-pi/"/>
      <url>/2015/12/20/insight-android-pm-pi/</url>
      <content type="html"><![CDATA[<p>我们总是在安装、卸载apk，然而对于以下几个问题，你知道如何解答吗?</p><ol><li>Package Manager 和 Package Installer 都是什么？</li><li>在 Android 中 APK 文件存储在哪里？</li><li>你知道 APK 安装的具体步骤吗？</li><li>Package Manager 是如何存储数据的？</li><li>在哪里可以找到 Package Manager 和 PackageInstaller 的源码？</li></ol><a id="more"></a><h2 id="什么是-Package-Manager、Package-Installer"><a href="#什么是-Package-Manager、Package-Installer" class="headerlink" title="什么是 Package Manager、Package Installer?"></a>什么是 Package Manager、Package Installer?</h2><p><code>PackageInstaller</code> 是安装普通应用的默认系统应用，它提供了一个接口来管理应用包，并调用 <code>InstallAppProgress</code> Activity 来接收用户指令，<code>InstallAppProgress</code> 会访问  <strong>Package Manager Service</strong> 查看包安装信息，可以在 <code>&lt;Android Source&gt;/packages/apps/PackageInstaller</code> 找到源码</p><p>Package Manager 实际上是管理应用安装、卸载的一个 API，当我们安装 APK 文件时，Package Manager 会解析 APK 文件来显示一些应用信息。当按下 OK 键时，Package Manager 调用方法 <code>installPackage（）</code>  并传递四个参数 : </p><ul><li>uri</li><li>installFlags</li><li>observer</li><li>installPackageName</li></ul><p>此时，Package Manager 会开启一个名为 <strong>package</strong> 的服务，其它任务都由这个服务来完成。在  PackageInstaller 的源码中，可以查看 <strong>PackageInstallerActivity.java</strong> 和 <strong>InstallAppProgress.java</strong> 这两个类，系统在启动时，会将 Package Manager Service 运行在系统进程中，而安装行为则由原生进程（native process）执行。</p><hr><h2 id="Where-are-APK-Files-Stored-in-Android"><a href="#Where-are-APK-Files-Stored-in-Android" class="headerlink" title="Where are APK Files Stored in Android?"></a>Where are APK Files Stored in Android?</h2><ul><li>a. 预装应用 （相机、日历、浏览器等）APK 存储在 <code>/system/app/</code></li><li>b. 用户应用（微博、微信等）APK 存储在 <code>/data/app/</code></li><li>c. Package Manager 会为每个应用创建一个目录 <code>/data/data/&lt;package-name&gt;/</code> 来存储数据库数据，shared preference 数据，本地库（native lib）和 缓存数据。</li></ul><p>You might see an apk file and *.odex file for the same APK. The ODEX file is totally a different discussion and purpose.</p><hr><h2 id="APK-安装内幕"><a href="#APK-安装内幕" class="headerlink" title="APK 安装内幕"></a>APK 安装内幕</h2><p>以下介绍了 Package Manager Service 具体执行步骤</p><ul><li>等待</li><li>将一个 package 添加到安装队列</li><li>确定应用安装的合适位置</li><li>确定是安装还是更新</li><li>将 apk 拷贝到指定路径下</li><li>给 app 分配 UID</li><li>请求安装进程</li><li>创建应用程序的目录，设置权限</li><li>解压dex文件到缓存路径</li><li>列出包的具体信息并映射到 <code>/system/data/packages.xml</code> 中，// To reflect and packages.list / system / data / packages.xml the latest status </li><li>广播安装进度 <code>Intent.ACTION_PACKAGE_ADDED</code> 或 <code>Intent.ACTION_PACKAGE_REPLACED</code></li></ul><p><img src="/imgs/post-151221-1.png" alt="安装步骤"></p><hr><h2 id="Package-Manager-如何存储数据"><a href="#Package-Manager-如何存储数据" class="headerlink" title="Package Manager 如何存储数据?"></a>Package Manager 如何存储数据?</h2><p>Package Manager 将应用信息存储在 <code>/data/system</code> 文件夹下的三个文件中，以 Android 4.0 Ice Cream Sandwich 模拟器镜像为例：</p><h3 id="1-packages-xml"><a href="#1-packages-xml" class="headerlink" title="1. packages.xml"></a>1. packages.xml</h3><p>该文件列出了所有包的权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">last-platform-version</span> <span class="attr">external</span>=<span class="string">"15"</span> <span class="attr">internal</span>=<span class="string">"15"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permission-trees</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permissions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android.permission.CHANGE_WIFI_MULTICAST_STATE"</span> <span class="attr">package</span>=<span class="string">"android"</span> <span class="attr">protection</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android.permission.CLEAR_APP_USER_DATA"</span> <span class="attr">package</span>=<span class="string">"android"</span> <span class="attr">protection</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span><span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">codepath</span>=<span class="string">"/system/app/Contacts.apk"</span> <span class="attr">flags</span>=<span class="string">"1"</span> <span class="attr">ft</span>=<span class="string">"136567b3990"</span> <span class="attr">it</span>=<span class="string">"136567b3990"</span> <span class="attr">name</span>=<span class="string">"com.android.contacts"</span> <span class="attr">nativelibrarypath</span>=<span class="string">"/data/data/com.android.contacts/lib"</span> <span class="attr">shareduserid</span>=<span class="string">"10001"</span> <span class="attr">ut</span>=<span class="string">"136567b3990"</span> <span class="attr">version</span>=<span class="string">"15"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sigs</span> <span class="attr">count</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cert</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cert</span>&gt;</span><span class="tag">&lt;/<span class="name">sigs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">codepath</span>=<span class="string">"/data/app/com.project.t2i-2.apk"</span> <span class="attr">flags</span>=<span class="string">"0"</span> <span class="attr">ft</span>=<span class="string">"13a837c2068"</span> <span class="attr">it</span>=<span class="string">"13a83704ea3"</span> <span class="attr">name</span>=<span class="string">"com.project.t2i"</span> <span class="attr">nativelibrarypath</span>=<span class="string">"/data/data/com.project.t2i/lib"</span> <span class="attr">userid</span>=<span class="string">"10040"</span> <span class="attr">ut</span>=<span class="string">"13a837c2ecb"</span> <span class="attr">version</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sigs</span> <span class="attr">count</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cert</span> <span class="attr">index</span>=<span class="string">"3"</span> <span class="attr">key</span>=<span class="string">"308201e530820...c5c7a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cert</span>&gt;</span><span class="tag">&lt;/<span class="name">sigs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">perms</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span><span class="tag">&lt;/<span class="name">perms</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">permission-trees</span>&gt;</span><span class="tag">&lt;/<span class="name">last-platform-version</span>&gt;</span><span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 XML 文件存储了两类数据:</p><h4 id="a-permission"><a href="#a-permission" class="headerlink" title="a.permission"></a>a.permission</h4><p>permission 存储在 <code>&lt;permissions&gt;</code> 标签下，每个 <strong>permission</strong> 有三个属性：</p><ul><li><strong>name</strong>  我们在 AndroidManifest.xml 中用到的权限名</li><li><strong>package</strong>  指明权限所属，大部分情况下都是默认值 <strong>android</strong></li><li><strong>protection</strong>  指定权限安全等级</li></ul><h4 id="b-packages-application"><a href="#b-packages-application" class="headerlink" title="b.packages(application)"></a>b.packages(application)</h4><p>packages 标签下有10个属性和一些子属性</p><table><thead><tr><th style="text-align:left">序</th><th style="text-align:left">属性名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">name</td><td style="text-align:left">package name</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">codePath</td><td style="text-align:left">APK 文件的安装位置 (<code>/system/app/</code> 或 <code>/data/app/</code>)</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">nativeLibraryPath</td><td style="text-align:left">本地库 (*.so 文件)路径， 默认路径是 <code>/data/data/&lt;package name&gt;/lib/</code></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">flag</td><td style="text-align:left">ApplicationInfo Flags <a href="http://developer.android.com/reference/android/content/pm/ApplicationInfo.html" target="_blank" rel="noopener">参考更多</a></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">ft</td><td style="text-align:left">hex 格式的时间戳</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">lt</td><td style="text-align:left">首次安装时间戳，hex 格式</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">ut</td><td style="text-align:left">最后更新时间戳，hex 格式</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">version</td><td style="text-align:left">AndroidManifest.xml文件中的 Version Code <a href="http://developer.android.com/guide/topics/manifest/manifest-element.html#vcode" target="_blank" rel="noopener">参考更多</a></td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">sharedUserId</td><td style="text-align:left">它会与其他有相同 sharedUserID 的程序共享数据，这个 id 与我们在 AndroidManifest 中定义 sharedUserID 的相同 <a href="http://developer.android.com/guide/topics/manifest/manifest-element.html#uid" target="_blank" rel="noopener">参考更多</a></td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">userId</td><td style="text-align:left">Linux用户ID</td></tr></tbody></table><p><strong>子属性</strong></p><ul><li><strong>sigs</strong>  签名信息, count 属性代表证书标签数量</li><li><strong>cert</strong>  全球认证证书</li><li><strong>perms</strong>  发行许可</li></ul><h3 id="2-packages-list"><a href="#2-packages-list" class="headerlink" title="2. packages.list"></a>2. packages.list</h3><p>简单的文本文件，列出了 <strong>package name</strong>、<strong>user id</strong>、<strong>flag</strong> 和 <strong>data</strong> 路径（我并没有找到比较完美的描述，但我猜想 <strong>packages.list</strong> 只保留一些重要的信息，是为了用来快速检索）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.android.launcher 10013 0 /data/data/com.android.launcher</span><br><span class="line">com.android.quicksearchbox 10033 0 /data/data/com.android.quicksearchbox</span><br><span class="line">com.android.contacts 10001 0 /data/data/com.android.contacts</span><br><span class="line">com.android.inputmethod.latin 10006 0 /data/data/com.android.inputmethod.latin</span><br></pre></td></tr></table></figure><h3 id="3-packages-stoped-xml"><a href="#3-packages-stoped-xml" class="headerlink" title="3. packages-stoped.xml"></a>3. packages-stoped.xml</h3><p>这个文件列出了哪些 package 是 stopped 状态，stopped 状态的应用程序不会接收到任何广播  <a href="http://droidyue.com/blog/2014/01/04/package-stop-state-since-android-3-dot-1/" target="_blank" rel="noopener">参考更多</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">stopped-packages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pkg</span> <span class="attr">name</span>=<span class="string">"com.android.widgetpreview"</span> <span class="attr">nl</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">pkg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pkg</span> <span class="attr">name</span>=<span class="string">"com.example.android.livecubes"</span> <span class="attr">nl</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">pkg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pkg</span> <span class="attr">name</span>=<span class="string">"com.android.gesture.builder"</span> <span class="attr">nl</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">pkg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pkg</span> <span class="attr">name</span>=<span class="string">"com.example.android.softkeyboard"</span> <span class="attr">nl</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">pkg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">stopped-packages</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Where-I-Can-Find-the-Source-Code-of-Package-Manager-and-Package-Installer"><a href="#Where-I-Can-Find-the-Source-Code-of-Package-Manager-and-Package-Installer" class="headerlink" title="Where I Can Find the Source Code of Package Manager and Package Installer?"></a>Where I Can Find the Source Code of Package Manager and Package Installer?</h2><p><strong>Package Manager</strong></p><ul><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/Settings.java" target="_blank" rel="noopener">frameworks/base/services/java/com/android/server/pm/Settings.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/PackageManagerService.java" target="_blank" rel="noopener">frameworks/base/services/java/com/android/server/pm/PackageManagerService.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/core/java/android/content/pm/IPackageManager.aidl" target="_blank" rel="noopener">frameworks/base/services/java/com/android/server/pm/IPackageManager.aidl</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/PackageSignatures.java" target="_blank" rel="noopener">frameworks/base/services/java/com/android/server/pm/PackageSignatures.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/PreferredActivity.java" target="_blank" rel="noopener">frameworks/base/services/java/com/android/server/pm/PreferredActivity.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/PreferredComponent.java" target="_blank" rel="noopener">frameworks/services/java/com/android/server/PreferredComponent.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/core/java/android/content/IntentFilter.java" target="_blank" rel="noopener">frameworks/core/java/android/content/IntentFilter.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/core/java/android/content/pm/PackageParser.java" target="_blank" rel="noopener">frameworks/base/core/java/android/content/pm/PackageParser.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/services/java/com/android/server/pm/Installer.java" target="_blank" rel="noopener">frameworks/base/services/java/com/android/server/pm/Installer.java</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/core/java/com/android/internal/app/IMediaContainerService.aidl" target="_blank" rel="noopener">frameworks/base/core/java/com/android/internal/app/IMediaContainerService.aidl</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/483f3b06ea84440a082e21b68ec2c2e54046f5a6/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java" target="_blank" rel="noopener">frameworks/base/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java</a></li></ul><p><strong>Package Installer</strong></p><ul><li><a href="https://android.googlesource.com/platform/packages/apps/PackageInstaller/+/47fe118e0178e9d72c98073ff588ee5cf353258e/src/com/android/packageinstaller/PackageInstallerActivity.java" target="_blank" rel="noopener">packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</a></li><li><a href="https://android.googlesource.com/platform/packages/apps/PackageInstaller/+/47fe118e0178e9d72c98073ff588ee5cf353258e/src/com/android/packageinstaller/PackageUtil.java" target="_blank" rel="noopener">packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageUtil.java</a></li><li><a href="https://android.googlesource.com/platform/packages/apps/PackageInstaller/+/47fe118e0178e9d72c98073ff588ee5cf353258e/src/com/android/packageinstaller/InstallAppProgress.java" target="_blank" rel="noopener">packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallAppProgress.java</a></li></ul><p><a href="https://dzone.com/articles/depth-android-package-manager" target="_blank" rel="noopener">原文链接</a></p>]]></content>
      
      <categories>
          
          <category> 它山之石 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package Manager </tag>
            
            <tag> Package Installer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AndroidStudio 编译时自动生成源代码</title>
      <link href="/2015/12/19/auto-generate-code-in-compiling-time-in-android/"/>
      <url>/2015/12/19/auto-generate-code-in-compiling-time-in-android/</url>
      <content type="html"><![CDATA[<h1 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h1><ul><li><code>@Retention(RetentionPolicy.SOURCE)</code></li><li><code>@Retention(RetentionPolicy.RUNTIME)</code></li><li><code>@Retention(RetentionPolicy.CLASS)</code></li></ul><p><a href="http://docs.oracle.com/javase/tutorial/java/annotations/index.html" target="_blank" rel="noopener">Annotation Document</a></p><h1 id="APT—annotation-processing-tool"><a href="#APT—annotation-processing-tool" class="headerlink" title="APT—annotation processing tool"></a>APT—annotation processing tool</h1><p><strong>apt</strong>（Annotation processing  tool） 是在编译时，扫描和处理注解的一个构建工具，<strong>Java 5</strong> 时就已经有了，直到 <strong>Java 6</strong> 才提供 API 给开发者，<strong>apt</strong> 的道路实在坎坷，到了 <strong>Java 7</strong> 又被废弃。现在，该功能由 <strong>javac</strong> 来实现，我们可以在 <strong>javac</strong> 编译时源代码额外生成 java 源代码（也可以是其它类型的文件），那么如何处理注解，需要我们了解 <code>AbstractProcessor</code> 这个类。</p><h1 id="AbstractProcessor"><a href="#AbstractProcessor" class="headerlink" title="AbstractProcessor"></a>AbstractProcessor</h1><p><strong>AbstractProcessor</strong> 是 <strong>javac</strong>  扫描和处理注解的关键类，在所有的 <code>Processor</code>API 中都可以看到它们都继承自 <code>AbstractProcessor</code> ，像下面的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.septenary.processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment env)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annoations, RoundEnvironment env)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><code>init(ProcessingEnvironment env)</code> ：<strong>javac</strong> 会在 <strong>Processor</strong> 创建时调用并执行的初始化操作，该方法会传入 一个参数 <code>ProcessingEnvironment env</code> ，通过 env 可以访问 <code>Elements</code>、<code>Types</code>、<code>Filer</code>等工具类。</li><li><code>process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</code> ：它是每个 <strong>processor</strong> 的主方法，可以在这个方法中扫描和处理注解，并生成新的 java 源代码，通过参数 <code>RoundEnvironment env</code> 可以找到我们想要的某一个被注解的元素</li><li><code>getSupportedAnnotationTypes()</code> 指定哪些注解需要注册</li><li><code>getSupportedSourceVersion()</code> 指定支持的 java 版本，通常返回 <code>SourceVersion.latestSupported()</code>，如果只想支持到 <strong>Java 6</strong> 可以返回 <code>SourceVersion.RELEASE_6</code></li></ul><p>在 <strong>Java 7</strong> 中可以不用重写 <code>getSupportedAnnotationTypes（）</code> 和 <code>getSupportedSourceVersion()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SupportedSourceVersion</span>(SourceVersion.latestSupported())</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;</span><br><span class="line">   <span class="comment">// Set of full qullified annotation type names</span></span><br><span class="line"> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment env)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annoations, RoundEnvironment env)</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Register-Your-Processor"><a href="#Register-Your-Processor" class="headerlink" title="Register Your Processor"></a>Register Your Processor</h1><p>如何让 <strong>javac</strong> 执行时调用我自定义的 <strong>MyProcessor</strong> 呢，需要注册自定义的 <strong>MyProcessor</strong> 来完成</p><p>1.<strong>MyProcessor</strong> 需要打包到 <strong>jar</strong> 包中，就像其它普通的 <strong>.jar</strong> 文件一样，这里命名为 <strong>MyProcessor.jar</strong><br>2.但 <strong>MyProcessor.jar</strong> 中多了一个特殊的文件：<strong>javax.annotation.processing.Processor</strong> 它存储在 <strong>jar/META-INF/services/</strong> 文件夹下，<strong>MyProcessor.jar</strong> 的结构是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MyProcessor.jar</span><br><span class="line">    - cn</span><br><span class="line">        - septenary</span><br><span class="line">            - processor</span><br><span class="line">                - MyProcessor.class</span><br><span class="line">    - META-INF</span><br><span class="line">        - services</span><br><span class="line">            - javax.annotation.processing.Processor</span><br></pre></td></tr></table></figure><p><strong>javax.annotation.processing.Processor</strong> 文件列出了要注册的 <strong>Processor</strong>，每个 <strong>Processor</strong> 逐行列出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cn.septenary.processor.MyProcessor</span><br><span class="line">com.foo.OtherProcessor</span><br><span class="line">net.foo.SpecialProcessor</span><br></pre></td></tr></table></figure><p>构建项目时 <strong>javac</strong> 自动检测并读取 <strong>javax.annotation.processing.Processor</strong> 来注册列出来的 <strong>Processor</strong></p><h1 id="Android-Studio-中实现编译时动态生成代码"><a href="#Android-Studio-中实现编译时动态生成代码" class="headerlink" title="Android Studio 中实现编译时动态生成代码"></a>Android Studio 中实现编译时动态生成代码</h1><h2 id="1-新建工程，分别创建三个模板"><a href="#1-新建工程，分别创建三个模板" class="headerlink" title="1.新建工程，分别创建三个模板"></a>1.新建工程，分别创建三个模板</h2><ul><li>app module (Android module)</li><li>api module (Java module)</li><li>compiler module (Java module)</li></ul><h2 id="2-根目录-build-gradle"><a href="#2-根目录-build-gradle" class="headerlink" title="2.根目录 build.gradle"></a>2.根目录 build.gradle</h2><p>需要声明依赖插件 <strong>android-apt</strong>，它是将 Android Studio 与 annotation processors 结合的一个插件，构建工程时，它会辅助 javac 执行 processor，  <a href="https://bitbucket.org/hvisser/android-apt#header-language" target="_blank" rel="noopener">More</a> </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3-app-module"><a href="#3-app-module" class="headerlink" title="3.app module"></a>3.app module</h2><p>Android 模板，使用 <strong>android-apt</strong>插件，依赖 <strong>api module</strong> 和 <strong>compiler module</strong></p><p>1.使用自定义注解 <code>@MyAnnotation</code> 的类 <code>Bean</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(String name, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtil.createString(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>app module</strong> 中并没有 <code>StringUtil</code> 这个类，不考虑其他 module ，编写 <code>Bean</code> 中代码时，IDE 会警告找不到 <code>StringUtil</code>这个类，它是在编译时由 <strong>javac</strong> 和 <strong>compiler.jar</strong> 自动生成，继续往下看</p><p> 2.build.gradle :<br> 3.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    apt <span class="keyword">project</span>(<span class="string">':compiler'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-lib-module"><a href="#4-lib-module" class="headerlink" title="4.lib module"></a>4.lib module</h2><p>普通的 java 模板，自定义注解 <code>MyAnnotation</code></p><p><strong>build.gradle :</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><strong>MyAnnotation:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-compiler-module"><a href="#5-compiler-module" class="headerlink" title="5.compiler module"></a>5.compiler module</h2><p>普通的 java 模板</p><p>1.自定义注解处理器: <code>MyProcessor</code><br>2.引入了三个依赖：</p><ul><li><strong>lib</strong> ，使用自定义的注解 <code>MyAnnotation</code>，</li><li><strong>auto-service</strong>， 用来自动生成 <strong>javax.annotation.processing.Processor</strong> 文件， <a href="https://github.com/google/auto/tree/master/service" target="_blank" rel="noopener">More</a></li><li><strong>javapoet</strong> ，自动生成代码的工具类库， <a href="https://github.com/square/javapoet" target="_blank" rel="noopener">More</a></li></ul><p><strong>MyProcessor:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注解 @AutoService 自动生成 javax.annotation.processing.Processor 文件</span></span><br><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION = <span class="string">"@"</span> + MyAnnotation.class.getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> Messager messager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line">        messager = processingEnv.getMessager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(MyAnnotation.class.getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">        List&lt;AnnotatedClass&gt; annotatedClasses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Element annotatedElement : roundEnv.getElementsAnnotatedWith(MyAnnotation.class)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (annotatedElement <span class="keyword">instanceof</span> TypeElement) &#123;</span><br><span class="line">                <span class="comment">// Our annotation is defined with @Target(value=TYPE)</span></span><br><span class="line">                TypeElement element = (TypeElement) annotatedElement;</span><br><span class="line">                <span class="keyword">if</span> (!isValidClass(element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    AnnotatedClass annotatedClass = buildAnnotatedClass(element);</span><br><span class="line">                    annotatedClasses.add(annotatedClass);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoPackageNameException | IOException e) &#123;</span><br><span class="line">                    String message = String.format(<span class="string">"Couldn't process class %s: %s"</span>, element, e.getMessage());</span><br><span class="line">                    messager.printMessage(ERROR, message, annotatedElement);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            generate(annotatedClasses);</span><br><span class="line">            <span class="comment">// genHelloWorld();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoPackageNameException | IOException e) &#123;</span><br><span class="line">            messager.printMessage(ERROR, <span class="string">"Couldn't generate class"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Messager messager = processingEnv.getMessager();</span><br><span class="line">        <span class="keyword">for</span> (TypeElement te : annotations) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element e : roundEnv.getElementsAnnotatedWith(te)) &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"HelloProcessor Printing: "</span> + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建被 @MyAnnotation 注解的类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AnnotatedClass <span class="title">buildAnnotatedClass</span><span class="params">(TypeElement typeElement)</span> <span class="keyword">throws</span> NoPackageNameException, IOException </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; variableNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Element element : typeElement.getEnclosedElements()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(element <span class="keyword">instanceof</span> VariableElement)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            VariableElement variableElement = (VariableElement) element;</span><br><span class="line">            variableNames.add(variableElement.getSimpleName().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnnotatedClass(typeElement, variableNames);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 StringUtil 源代码</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">(List&lt;AnnotatedClass&gt; list)</span> <span class="keyword">throws</span> NoPackageNameException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (AnnotatedClass annotatedClass : list) &#123;</span><br><span class="line">            <span class="comment">// debug</span></span><br><span class="line">            String message = annotatedClass.annotatedClassName + <span class="string">" / "</span> + annotatedClass.typeElement + <span class="string">" / "</span> + Arrays.toString(annotatedClass.variableNames.toArray());</span><br><span class="line">            messager.printMessage(Diagnostic.Kind.NOTE, message, annotatedClass.typeElement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成源代码</span></span><br><span class="line">        String packageName = getPackageName(processingEnv.getElementUtils(), list.get(<span class="number">0</span>).typeElement);</span><br><span class="line">        TypeSpec generatedClass = CodeGenerator.generateClass(list);</span><br><span class="line">        JavaFile javaFile = JavaFile.builder(packageName, generatedClass).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 app module/build/generated/source/apt 生成一份源代码</span></span><br><span class="line">        javaFile.writeTo(processingEnv.getFiler());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试在桌面生成一份源代码</span></span><br><span class="line">        javaFile.writeTo(<span class="keyword">new</span> File(System.getProperty(<span class="string">"user.home"</span>) + <span class="string">"/Desktop/"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在桌面生成 HelloWorld.java</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">genHelloWorld</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        MethodSpec main = MethodSpec.methodBuilder(<span class="string">"main"</span>).addModifiers(Modifier.PUBLIC, Modifier.STATIC).returns(<span class="keyword">void</span>.class).addParameter(String[].class, <span class="string">"args"</span>).addStatement(<span class="string">"$T.out.println($S)"</span>, System.class, <span class="string">"Hello, JavaPoet!"</span>).build();</span><br><span class="line">        TypeSpec helloWorld = TypeSpec.classBuilder(<span class="string">"HelloWorld"</span>).addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(main).build();</span><br><span class="line">        JavaFile javaFile = JavaFile.builder(<span class="string">"cn.septenary.annotation"</span>, helloWorld).build();</span><br><span class="line">        javaFile.writeTo(<span class="keyword">new</span> File(System.getProperty(<span class="string">"user.home"</span>) + <span class="string">"/Desktop/Hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被 @MyAnnotation 注解的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotatedClass</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 整个类元素</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> TypeElement typeElement;</span><br><span class="line">        <span class="comment">// 类名</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String annotatedClassName;</span><br><span class="line">        <span class="comment">// 成员变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> List&lt;String&gt; variableNames;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AnnotatedClass</span><span class="params">(TypeElement typeElement, List&lt;String&gt; variableNames)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.annotatedClassName = typeElement.getSimpleName().toString();</span><br><span class="line">            <span class="keyword">this</span>.variableNames = variableNames;</span><br><span class="line">            <span class="keyword">this</span>.typeElement = typeElement;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TypeMirror <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> typeElement.asType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 源码生成器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_NAME = <span class="string">"StringUtil"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TypeSpec <span class="title">generateClass</span><span class="params">(List&lt;AnnotatedClass&gt; classes)</span> </span>&#123;</span><br><span class="line">            TypeSpec.Builder builder = classBuilder(CLASS_NAME).addModifiers(PUBLIC, FINAL);</span><br><span class="line">            <span class="keyword">for</span> (AnnotatedClass anno : classes) &#123;</span><br><span class="line">                builder.addMethod(makeCreateStringMethod(anno));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> builder.build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 AnnotatedClass 作为参数构建 createString() 方法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MethodSpec <span class="title">makeCreateStringMethod</span><span class="params">(AnnotatedClass annotatedClass)</span> </span>&#123;</span><br><span class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            builder.append(String.format(<span class="string">"return \"%s&#123;\" + "</span>, annotatedClass.annotatedClassName));</span><br><span class="line">            <span class="keyword">for</span> (String variableName : annotatedClass.variableNames) &#123;</span><br><span class="line">                builder.append(String.format(<span class="string">" \"%s='\" + String.valueOf(instance.%s) + \"',\" + "</span>, variableName, variableName));</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(<span class="string">"\"&#125;\""</span>);</span><br><span class="line">            <span class="keyword">return</span> methodBuilder(<span class="string">"createString"</span>).addJavadoc(<span class="string">"@return string suitable for &#123;@param instance&#125;'s toString()"</span>).addModifiers(PUBLIC, STATIC).addParameter(TypeName.get(annotatedClass.getType()), <span class="string">"instance"</span>).addStatement(builder.toString()).returns(String.class).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPublic</span><span class="params">(TypeElement element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> element.getModifiers().contains(PUBLIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAbstract</span><span class="params">(TypeElement element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> element.getModifiers().contains(ABSTRACT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValidClass</span><span class="params">(TypeElement element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isPublic(element)) &#123;</span><br><span class="line">            String message = String.format(<span class="string">"Classes annotated with %s must be public."</span>, ANNOTATION);</span><br><span class="line">            messager.printMessage(Diagnostic.Kind.ERROR, message, element);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isAbstract(element)) &#123;</span><br><span class="line">            String message = String.format(<span class="string">"Classes annotated with %s must not be abstract."</span>, ANNOTATION);</span><br><span class="line">            messager.printMessage(Diagnostic.Kind.ERROR, message, element);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPackageName</span><span class="params">(Elements elements, TypeElement typeElement)</span> <span class="keyword">throws</span> NoPackageNameException </span>&#123;</span><br><span class="line">        PackageElement pkg = elements.getPackageOf(typeElement);</span><br><span class="line">        <span class="keyword">if</span> (pkg.isUnnamed()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoPackageNameException(typeElement);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pkg.getQualifiedName().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>build.gradle:</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':lib'</span>)</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.google.auto.service:auto-service:1.0-rc2'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.squareup:javapoet:1.4.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-构建-api-module"><a href="#6-构建-api-module" class="headerlink" title="6.构建 api module"></a>6.构建 api module</h2><p>生成 <strong>api.jar</strong> ,供 <strong>lib module </strong> 和 <strong>app module</strong> 使用</p><h2 id="7-构建-lib-module"><a href="#7-构建-lib-module" class="headerlink" title="7.构建 lib module"></a>7.构建 lib module</h2><p>生成了 <strong>complier.jar</strong> ，其中关键文件 <strong>javax.annotation.processing.Processor</strong> 也被自动添加到 jar 包中</p><p><img src="/imgs/post-1512109-1.png" alt="complier.jar"> </p><h2 id="8-构建-app-module"><a href="#8-构建-app-module" class="headerlink" title="8.构建 app module"></a>8.构建 app module</h2><p>构建后会看到，IDE 不在警告 <code>TextUtil</code> 找不到的错误了，他的文件被自动生成在:</p><p><img src="/imgs/post-1512109-2.png" alt="TextUtil"> </p><h2 id="9-案例源码"><a href="#9-案例源码" class="headerlink" title="9.案例源码"></a>9.案例源码</h2><p><a href="https://github.com/Ryfthink/Android-Gradle-Multy-Flavor" target="_blank" rel="noopener">Github Source Code</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="http://brianattwell.com/android-annotation-processing-pojo-string-generator/" target="_blank" rel="noopener">Android Annotation Processing: POJO string generator</a></p></li><li><p><a href="https://deors.wordpress.com/2011/10/08/annotation-processors/" target="_blank" rel="noopener">Code Generation using Annotation Processors</a></p></li><li><p><a href="http://hannesdorfmann.com/annotation-processing/annotationprocessing101/" target="_blank" rel="noopener">Annotation Processing</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android 盒子适配解决办法汇总</title>
      <link href="/2015/12/10/android-tv-dimention-adaption/"/>
      <url>/2015/12/10/android-tv-dimention-adaption/</url>
      <content type="html"><![CDATA[<p>虽然现在大部分盒子和智能电视都是1080P或720P的分辨率，但考虑到有些山寨厂商的分辨率并没有按照标准执行，我们通常用 dp 在不同分辨率上做的适配方案所达到的适配效果在部分盒子上并不理想，而且工程量也大。这就产生了怎么样做好一次布局，多处适配的方案。下面分别介绍一下我收集到的三种适配方案，以及各自的优劣之处。</p><a id="more"></a><h2 id="集中适配-LayoutCompat"><a href="#集中适配-LayoutCompat" class="headerlink" title="集中适配 LayoutCompat"></a>集中适配 LayoutCompat</h2><p>设计师通常会按照某一特定分辨率进行UI设计，以 <strong>1920x1080</strong> 的标注图为例，在 <strong>res/layout</strong> 文件夹下创建UI视图，参照标注图的尺寸，所有UI视图都按照 <strong>像素px</strong> 为单位配置 （ TextView 的 textSize也不例外）。</p><p>写好了所有的 <strong>layout.xml</strong> 布局后，要介绍一下 <code>LayoutCompat</code> 这个工具类的使用。<code>LayoutCompat</code> 首先按照当前设备的分辨率 与 <strong>1920x1080</strong> 比较计算出一个缩放因子 <code>scaleFactor</code>，然后遍历根视图下所有子View，按照 <code>scaleFactor</code> 重新计算子View的 <code>LayoutParams</code>, <code>padding</code>, <code>margin</code>, <code>textSize</code> 等等，然后重新配置给子View。你只需要在 <code>Activity</code> 中调用 <code>setContent()</code> 后执行下面语句，就完成了所有设备的适配工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutCompat.init(<span class="keyword">this</span>);</span><br><span class="line">LayoutCompat.L1080P.compat(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>其中静态常量 <code>L1080P</code> 是 <code>LayoutComat</code> 预设好的设计方案，如果是按照其他分辨率的标准设计，以 <strong>1280x720</strong> 为例，可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutCompat.init(<span class="keyword">this</span>);</span><br><span class="line">LayoutCompat.obtain(<span class="number">1280</span>,<span class="number">720</span>).compat(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>下面介绍一下 <code>LayoutCompat</code> 工具类部分核心代码，获取源代码，戳这里<a href="https://github.com/Ryfthink/LayoutCompat" target="_blank" rel="noopener">Github源码</a>找到它</p><p>计算缩放因子 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">baseScale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sBaseScaleByW ? (<span class="number">1f</span> * sScreenSize.x / mDesignWidth) : (<span class="number">1f</span> * sScreenSize.y / mDesignHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配Activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compatActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 找到Activity 的 rootView进行适配</span></span><br><span class="line">    compatViewImpl(activity.findViewById(android.R.id.content));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配View</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compatViewImpl</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sScreenSize == <span class="keyword">null</span> || sScreenSize.x == <span class="number">0</span> || sScreenSize.y == <span class="number">0</span>) &#123;</span><br><span class="line">        init(view.getContext());</span><br><span class="line">    &#125;</span><br><span class="line">    ViewGroup.LayoutParams params = view.getLayoutParams();</span><br><span class="line">    <span class="comment">// 计算 width ，height ，margin</span></span><br><span class="line">    <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (params.width &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            params.width = w(params.width);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params.height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            params.height = h(params.height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params <span class="keyword">instanceof</span> MarginLayoutParams) &#123;</span><br><span class="line">            MarginLayoutParams mParams = (MarginLayoutParams) params;</span><br><span class="line">            mParams.leftMargin = w(mParams.leftMargin);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算 padding</span></span><br><span class="line">    view.setPadding(w(view.getPaddingLeft()), h(view.getPaddingTop()), w(view.getPaddingRight()), h(view.getPaddingBottom()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 TextView 的 size</span></span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> TextView) &#123;</span><br><span class="line">        TextView tv = (TextView) view;</span><br><span class="line">        tv.setTextSize(TypedValue.COMPLEX_UNIT_PX, w((<span class="keyword">int</span>) tv.getTextSize()));</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历子View 并适配</span></span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">        ViewGroup vg = (ViewGroup) view;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = vg.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            compactViewImpl(vg.getChildAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点</p><ul><li>优点：轻量级适配，代码量少，方便快捷 </li><li>缺点：不能适配 res/drawable 下的资源</li></ul><h2 id="自定义-AutoLayout"><a href="#自定义-AutoLayout" class="headerlink" title="自定义 AutoLayout"></a>自定义 AutoLayout</h2><p>这种方式重写了部分 ViewGroup:（<code>LinearLayout</code>，<code>RelativeLayout</code>，<code>FrameLayout</code>），配合工具类 <code>AutoUtils</code> ，按照特定分辨率用 px 单位配置 <strong>layout</strong>，然后重新计算 <code>padding，margin， size</code> 等，戳这里<a href="https://github.com/hongyangAndroid/AndroidAutoLayout" target="_blank" rel="noopener">Github</a>找到项目</p><p>优缺点</p><ul><li>轻量级适配</li><li>不能适配 res/drawable 下的资源，源码相对一号方案还很臃肿，需要外部引入的方式，扩展性不理想，必须使用给定的 ViewGroup ，自由度下降</li></ul><h2 id="多分辨率-dimens-value"><a href="#多分辨率-dimens-value" class="headerlink" title="多分辨率 dimens value"></a>多分辨率 dimens value</h2><p><strong>优酷TV版</strong> 采取的适配方案，逆向该工程可以看到，有以下资源<br><img src="/imgs/post-151210-1.png" alt="values-nodpi-x"> </p><p>再来看一下某一个 layout 文件<br><img src="/imgs/post-151210-2.png" alt="values-nodpi-x"> </p><p>其中除了 <code>fill_parent</code> 和 <code>wrap_content</code>，都是引用 <strong>dimens</strong> 的值来配置，上图已经列出大多数分辨率的 <strong>values</strong>，这些<strong>dimens</strong> 在每个 <strong>values-nodpi-x</strong> 文件夹下都有一份 <strong>dimens.xml</strong> ，接下来看一下其中一个 <strong>dimens.xml</strong> 文件记录的值：<br><img src="/imgs/post-151210-3.png" alt="dimens.xml"> </p><p>可以看到，该文件针对于与之对应的分辨率（ <strong>values-nodpi-x</strong>） 做了适配.</p><p>优缺点<br>-优点：适配完全交给了framework，不需要开发者配置任何代码<br>-缺点：分辨率列出的有限，工程略臃肿。</p><p>上图列出的  <strong>values-nodpi-x</strong> 由脚本生成，通过它可以帮开发者解决些这么多values-xx 的麻烦事情，戳这里<a href="http://blog.csdn.net/lmj623565791/article/details/45460089" target="_blank" rel="noopener">链接</a>，参考 <code>GenerateValueFiles</code> 自动生成 values 文件程序</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Gradle Multi Flavors</title>
      <link href="/2015/11/08/multi-flavor-in-android/"/>
      <url>/2015/11/08/multi-flavor-in-android/</url>
      <content type="html"><![CDATA[<p>我们用 <strong>Gradle</strong> 构建多个渠道包，而且这些渠道包都是有差异的，可能是包名不同，可能是代码不同，也可能是资源不同，<strong>flavors</strong>  这个概念由此产生，用  <strong>flavors</strong> 来配置构建脚本 <strong>build.gradle</strong> ，可以构建 Android 工程的多个变种</p><h2 id="最简单的-flavors-配置"><a href="#最简单的-flavors-配置" class="headerlink" title="最简单的 flavors 配置"></a>最简单的 flavors 配置</h2><p>在 <strong>build.gradle</strong> 文件中，构建多个变种，最简单的配置如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">googlePlay &#123;</span><br><span class="line">&#125;</span><br><span class="line">appStore &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>gradle build</code> 后你会看见，<strong>./output/apk 文件夹</strong> 下生成了 <strong>googlePlay</strong> 和 <strong>appStore</strong> 两种 APK 文件，接下来就以这两个变种为例，详细介绍下如何配置 <strong>flavors</strong></p><a id="more"></a><h2 id="多个包名"><a href="#多个包名" class="headerlink" title="多个包名"></a>多个包名</h2><p>下面配置的 <code>applicationId</code> 会在打包时替换 <strong>AndroidManifest.xml</strong> 中的 <code>package=&quot;xx.xx&quot;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">googlePlay &#123;</span><br><span class="line">applicationId <span class="string">'cn.septenary.mulityflavors_googlePlay'</span></span><br><span class="line">&#125;</span><br><span class="line">appStore &#123;</span><br><span class="line">applicationId <span class="string">'cn.septenary.mulityflavors_appStore'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个BuildConfig"><a href="#多个BuildConfig" class="headerlink" title="多个BuildConfig"></a>多个BuildConfig</h2><p><strong>BuildConfig</strong> 是 Android 构建的时候自动生成配置文件，最常用的就是常量 <code>BuildConfig.DEBUG</code> ，便于开发者区分不同的版本来编写不同的代码，下面代码介绍了在 <strong>BuildConfig</strong> 中根据不同的 <strong>flavor</strong>  配置不同的自定义常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">googlePlay &#123;</span><br><span class="line">buildConfigField <span class="string">"String"</span>,<span class="string">"SotreName"</span>,<span class="string">"\"Google 应用商店\""</span></span><br><span class="line">&#125;</span><br><span class="line">appStore &#123;</span><br><span class="line">buildConfigField <span class="string">"String"</span>,<span class="string">"SotreName"</span>,<span class="string">"\"苹果 应用商店\""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>buildConfigField</code> 需要三个变量，第一个参数定义了<strong>常量类型</strong>，第二个参数为<strong>常量名</strong>，第三个参数定义了<strong>常量值</strong>，这里需要注意第三个参数，由于定义的常量是 String 类型，所以用到了 <code>\&quot;</code>进行转义，在代码中访问 <code>BuildConfig.SotreName</code>  就可以拿到不同 <strong>flavor</strong> 对应的 <code>SotreName</code> 的值了。</p><h2 id="同时修改多个-flavor"><a href="#同时修改多个-flavor" class="headerlink" title="同时修改多个 flavor"></a>同时修改多个 flavor</h2><p>如果你的项目多个flavor用到了同一个配置，可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">productFlavors.all &#123; flavor -&gt;</span><br><span class="line"><span class="comment">// replace all buildConfigField -&gt; SotreName</span></span><br><span class="line">flavor.buildConfigField <span class="string">'String'</span>, <span class="string">'SotreName'</span>, <span class="string">'"默认商店名"'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多资源"><a href="#多资源" class="headerlink" title="多资源"></a>多资源</h2><p>如果一个应用，在不同的渠道需要不同的启动图或者文字提示，flavor 同样可以帮我们完成。</p><p>1.首先，Android Studio 的工程目录默认地将源代码和资源都放在了 <strong>src/main</strong> 文件夹下，在 <strong>main</strong> 的同级目录，也就是  <strong>src</strong> 文件夹下创建全路径文件 <strong>src/googlePlay/res/values/strings.xml</strong>，（注意：路径中的 “googlePlay” 必须与 flavor 名称一一对应），这个文件代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Flavor: Google Play<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.同样地，创建全路径文件 <strong>src/appStore/res/values/strings.xml</strong>，配置下面的代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Flavor: App Store<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">3.在java源代码中调用 `getResources().getString(R.string.hello_flavor)` ，不同的 flavor 构建成的 APK 运行起来打印出的结果便不同了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.如果想要替换其他资源，同样地按照 **src + flavor名称 + 对应要修改的文件** 这种方式，都可以完成，这种方式同样适用于替换源代码（类名，包名必须保持一致）</span><br><span class="line"></span><br><span class="line">占位符 Placeholder</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">如果你想在代码中从 **AndroidManifest.xml **，通过不同的 flavor 读取不同的 **meta-data** 值，该如何实现呢？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**Placeholder** 占位符 这个概念，可以帮我们完成，下面是如何使用占位符的示例：</span><br><span class="line"></span><br><span class="line">1.在 **AndroidManifest** 文件中配置：</span><br><span class="line"> </span><br><span class="line"> ```xml</span><br><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span>;</span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">"CHANNEL"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:value</span>=<span class="string">"$&#123;CHANNEL_VALUE&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>${CHANNEL_VALUE}</code> 为占位符，下面通过这个这个占位符对不同的 flavor 进行配置</p><p>2.在 <strong>build.config</strong> 中配置占位符：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line"><span class="comment">// Placeholder</span></span><br><span class="line">manifestPlaceholders = [<span class="string">CHANNEL_VALUE:</span> <span class="string">'channel_testing'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">productFlavors.all &#123; flavor -&gt;</span><br><span class="line"><span class="comment">// replace all placeholders</span></span><br><span class="line">flavor.manifestPlaceholders.put(<span class="string">"CHANNEL_VALUE"</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">productFlavors &#123;</span><br><span class="line">googlePaly &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">appStore &#123;</span><br><span class="line">...</span><br><span class="line">manifestPlaceholders.put(<span class="string">"CHANNEL_VALUE"</span>, <span class="string">'channel_appstore'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指定-APK-输出"><a href="#指定-APK-输出" class="headerlink" title="指定 APK 输出"></a>指定 APK 输出</h2><p>默认地，<code>gradle build</code> 构建出来的 APK 是构建系统默认设置的名字，如果我们想要 APK 的名字追加生成时间、指定生成路径，改怎么办呢？</p><p>1.定义函数 buildTime</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> buildTime() &#123;</span><br><span class="line"><span class="keyword">def</span> date = <span class="keyword">new</span> Date()</span><br><span class="line"><span class="keyword">def</span> formattedDate = date.format(<span class="string">'yyyy-MM-dd'</span>)</span><br><span class="line"><span class="keyword">return</span> formattedDate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码要放在与 <strong>android {…}</strong> 同级下，而不是嵌入在 <strong>android{…}</strong> 中</p><p>2.全局配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">variant.outputs.each &#123; output -&gt;</span><br><span class="line"><span class="keyword">def</span> parent = output.outputFile.parent;</span><br><span class="line"><span class="keyword">def</span> apkName = <span class="string">"$&#123;variant.flavorName&#125;_$&#123;variant.versionName&#125;_$&#123;buildTime()&#125;.apk"</span></span><br><span class="line">output.outputFile = <span class="keyword">new</span> File(parent, apkName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.针对与某个 <strong>buildType</strong> 配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">release &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">debug &#123;</span><br><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">variant.outputs.each &#123; output -&gt;</span><br><span class="line"><span class="keyword">if</span> (output.outputFile != <span class="literal">null</span> </span><br><span class="line">&amp;&amp; output.outputFile.name.endsWith(<span class="string">'.apk'</span>) </span><br><span class="line">&amp;&amp;<span class="string">'debug'</span>.equals(variant.buildType.name)&#123;</span><br><span class="line"><span class="keyword">def</span> parent = output.outputFile.getParent();</span><br><span class="line"><span class="keyword">def</span> apkName = <span class="string">"$&#123;variant.flavorName&#125;_$&#123;variant.versionName&#125;_$&#123;buildTime()&#125;.apk"</span></span><br><span class="line"><span class="keyword">def</span> apkFile = <span class="keyword">new</span> File(parent,apkName)</span><br><span class="line">output.outputFile = apkFile</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>我在 <a href="https://github.com/Ryfthink/Android-Gradle-Mulity-Flavor" target="_blank" rel="noopener">Github</a> 上发布了一个 <strong>Demo</strong> 供大家参考</p><h2 id="部分参考"><a href="#部分参考" class="headerlink" title="部分参考"></a>部分参考</h2><p><a href="http://stackoverflow.com/questions/20976946/dynamically-generating-product-flavors" target="_blank" rel="noopener">Dynamically generating product flavors</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>AndroidStudio Option 快捷键失效</title>
      <link href="/2015/08/15/quickshot-option-notwork-in-android/"/>
      <url>/2015/08/15/quickshot-option-notwork-in-android/</url>
      <content type="html"><![CDATA[<h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>前些天把将 Mac 从 Yosemite 升级到 EI Capitan 后，Android Studio 和 IntelliJ IDEA中 option 快捷键 （按住 option + 任意字符）都失效了，只能输出一些特殊字符：</p><p><img src="http://assets.septenary.cn/user/1/image/06847cc6-0dee-44f7-e981-6c912e878428" alt="Alt text"></p><a id="more"></a><p>以 <code>（option + / ）</code>为例（博主从Eclipse转到AS 的，习惯了用 option + / ）， 在 AS 中配置 Key Map，在编辑器中键入快捷键时，本来因该是代码会自动提示，但却输出了 <code>÷</code></p><p><img src="http://assets.septenary.cn/user/1/image/60dbb31b-ed9f-4402-b03e-88c54a0a4605" alt="Alt text"></p><h2 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h2><p>首先下载一个制作自定义输入法的工具 <strong>Ukelele</strong> ，<br>打开 <strong>Ukelele</strong> -&gt; <strong>File</strong> -&gt; <strong>New From Current Input Source</strong>  出现下面窗口</p><p><img src="http://assets.septenary.cn/user/1/image/bf7fa070-9f16-404b-887d-a59127179fb3" alt="Alt text"></p><p>打开 <strong>U.S.</strong></p><p><img src="http://assets.septenary.cn/user/1/image/397a94ba-6055-4831-d724-ad6d5804d6ea" alt="Alt text"></p><p>按住 option 你会看到</p><p><img src="http://assets.septenary.cn/user/1/image/fbf93aa6-6439-45b9-85b4-835b1babab97" alt="Alt text"></p><p>这里就是 <strong>U.S.</strong> 的默认键位映射，修改 <code>÷</code> 为 <code>/</code> </p><p>然后 <strong>File</strong> -&gt; <strong>Save</strong>(<strong>File Formate</strong> 选择 <strong>Keyboard Layout</strong> ) -&gt; 保存文件到 <strong>~/Library/Keyboard Layouts</strong> 文件夹下 -&gt; 打开输入法偏好设置 -&gt; 添加 -&gt; 其它 -&gt; 选择并切换到该输入法, 你的 IDE 快捷键就会生效啦。</p><h2 id="解决方法二（11月9日更新）"><a href="#解决方法二（11月9日更新）" class="headerlink" title="解决方法二（11月9日更新）"></a>解决方法二（11月9日更新）</h2><p><strong>V2EX</strong> 有一同学讲到: <a href="http://www.v2ex.com/t/234678" target="_blank" rel="noopener">链接</a></p><blockquote><p>是 jdk 的问题， jdk7 之后就有这个问题，先试试新版（自带 jre 的），如果最后还是不行，可以换个映射，然后通过 karabiner 把之前的热键（ OPT+/）映射成新的热键</p></blockquote><p>我的Mac上是 “java version 1.8.0_05” 最新版本，同样失效，看来最新JRE 并没有解决该问题，换映射并不习惯，用上面讲到的方法替换输入法也有局限性，那就试试替换成旧版JAVA的吧。</p><p>要了解一下 Android Studio 中的两种 JDK ，<a href="http://tools.android.com/tech-docs/configuration/osx-jdk" target="_blank" rel="noopener">戳这里</a> 官网有详细解释。</p><ul><li><strong>Project JDK</strong> （编译项目工程使用的 JDK版本）</li><li><strong>IDE JDK</strong> （IDE使用的JDK版本）</li></ul><p>知道了这些看来只需要更换 IDE 的 JDK 就能解决了，按照以下步骤：</p><p>1.下载旧版 <a href="https://support.apple.com/kb/DL1572?locale=zh_CN" target="_blank" rel="noopener">JAVA 6 下载链接</a> ,  退出所有使用JAVA 的应用程序进行安装</p><p>2.在终端中配置环境变量 <code>export STUDIO_JDK=/Library/Java/JavaVirtualMachines/1.6.0.jdk</code></p><p>3.生效后,打开 Android Studio，IDE JDK 换成了1.6，快捷键 <strong>option+/</strong> 便生效了</p><p> <img src="http://assets.septenary.cn/user/1/image/2435861c-e7e1-408d-a40d-9378920fb8bb" alt="Alt text"></p>]]></content>
      
      <categories>
          
          <category> Chore </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>WeakHandler 技术分析</title>
      <link href="/2015/08/07/weak-handler-in-android/"/>
      <url>/2015/08/07/weak-handler-in-android/</url>
      <content type="html"><![CDATA[<h1 id="Handler-导致的-Context-Leak"><a href="#Handler-导致的-Context-Leak" class="headerlink" title="Handler 导致的 Context Leak"></a>Handler 导致的 Context Leak</h1><p>先看下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// Post a message and delay its execution for 10 minutes.</span></span><br><span class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span> * <span class="number">60</span> * <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// Go back to the previous Activity.</span></span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android Lint 会提示我们内存泄露风险</p><blockquote><p>in Android, Handler classes should be static or leaks might occur.</p></blockquote><p>代码中，在 Activity 的 onCreate 方法里创建了一个 Handler，然后延时执行一个消息，在这段延时时间内，如果 Activity 销毁，会导致 Activity 的泄露，原因在于 Handler 将消息提交到 MessageQueue 中，而 MessageQueue 是跟随 App 整个生命周期存在的，这个匿名 Runnable 却隐式的持有了 Activity 的引用，从而导致了内存泄露。</p><p>关于更多 Context Leak 的详细内容，可以查看这个连接 <a href="http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html" target="_blank" rel="noopener">How to Leak a Context</a></p><p>文中的解决方案是用 WeakReference 来包装 Activity，这种方式可以解决 Context 的泄露，但是在实际开发中，每个的 Handler 都要用 WeakReference 来包装，略显臃肿。</p><h1 id="用-WeakHandler-替换-Handler"><a href="#用-WeakHandler-替换-Handler" class="headerlink" title="用 WeakHandler 替换 Handler"></a>用 WeakHandler 替换 Handler</h1><p>WeakHandler 的<a href="https://github.com/badoo/android-weak-handler" target="_blank" rel="noopener">源码</a>托管在 Github 上，我们来具体分析一下 WeakHandler 是如何解决 MemoryLeak 的。</p><p>WeakHandler 并没有继承自 Handler , 而是定义了一个静态内部类 ExecHandler，所有的消息发送都是由 ExecHandler 接管的，下面是 ExecHandler 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Handler.Callback&gt; mCallback;</span><br><span class="line"></span><br><span class="line">    ExecHandler() &#123;</span><br><span class="line">        mCallback = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExecHandler(WeakReference&lt;Handler.Callback&gt; callback) &#123;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExecHandler(Looper looper) &#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">        mCallback = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExecHandler(Looper looper, WeakReference&lt;Handler.Callback&gt; callback) &#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">        mCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(@NonNull Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Handler.Callback callback = mCallback.get();</span><br><span class="line">        <span class="keyword">if</span> (callback == <span class="keyword">null</span>) &#123; <span class="comment">// Already disposed</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        callback.handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ExecHandler 用弱引用 WeakReference 包装了 Handler.Callback , 而 Handler.Callback 则是由 WeakHandler 传入的，通过它解决了 Handler.Callback 的 leak  风险 。</p><p>我们知道用 Handler 发送消息有两种方式，接下来分别来看下 WeakHandler 是如何实现的。</p><h2 id="sendMessage-Message"><a href="#sendMessage-Message" class="headerlink" title="sendMessage(Message)"></a>sendMessage(Message)</h2><p>当我们用 WeakHandler 发送消息时，实际上调用了 ExecHandler 的 sendMessage(…) 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mExec.sendMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>处理消息时需要实现 Handler.Callback  接口的 handleMessage(Message) 方法，然后在 WeakHandler 构造器中传入 。</p><h2 id="post-Runnable"><a href="#post-Runnable" class="headerlink" title="post(Runnable)"></a>post(Runnable)</h2><p>看一下 WeakHandler 的 post 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delay)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mExec.postDelayed(wrapRunnable(r), delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样是由 ExecHandler 处理的，但 Runnable 被 <code>wrapRunnable(r)</code> 包装了一下 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> WeakRunnable <span class="title">wrapRunnable</span><span class="params">(@NonNull Runnable r)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">final</span> ChainedRef hardRef = <span class="keyword">new</span> ChainedRef(mLock, r);</span><br><span class="line">    mRunnables.insertAfter(hardRef);</span><br><span class="line">    <span class="keyword">return</span> hardRef.wrapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mRunnables 维护了一个简单的双向链表，用 ChainedRef 代表链表节点，插入到 mRunnables 的链表中，下面是 ChainedRef 的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedRef</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    ChainedRef next;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    ChainedRef prev;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">final</span> Runnable runnable;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">final</span> WeakRunnable wrapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    Lock lock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChainedRef</span><span class="params">(@NonNull Lock lock, @NonNull Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runnable = r;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        <span class="keyword">this</span>.wrapper = <span class="keyword">new</span> WeakRunnable(<span class="keyword">new</span> WeakReference&lt;&gt;(r), <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WeakRunnable <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                prev.next = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                next.prev = prev;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = <span class="keyword">null</span>;</span><br><span class="line">            next = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wrapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(@NonNull ChainedRef candidate)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.next.prev = candidate;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            candidate.next = <span class="keyword">this</span>.next;</span><br><span class="line">            <span class="keyword">this</span>.next = candidate;</span><br><span class="line">            candidate.prev = <span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WeakRunnable <span class="title">remove</span><span class="params">(Runnable obj)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChainedRef curr = <span class="keyword">this</span>.next; <span class="comment">// Skipping head</span></span><br><span class="line">            <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curr.runnable == obj) &#123; <span class="comment">// We do comparison exactly how Handler does inside</span></span><br><span class="line">                    <span class="keyword">return</span> curr.remove();</span><br><span class="line">                &#125;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChainedRef 的构造器中用 WeakReference 将 Runnable 包装在 WeakRunnable 中避免了 leak 的风险, 当我们像Handler.removeCallback() 那样移除回调时，除了移除 ExecHandler 中的 WeakRunnable ，也要把链表中的 Runnable 移除掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove any pending posts of Runnable r that are in the message queue.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeCallbacks</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> WeakRunnable runnable = mRunnables.remove(r);</span><br><span class="line">    <span class="keyword">if</span> (runnable != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mExec.removeCallbacks(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WeakHandler-的缺点"><a href="#WeakHandler-的缺点" class="headerlink" title="WeakHandler 的缺点"></a>WeakHandler 的缺点</h2><p>上面介绍的 WeakHandler 的实现可以看到，想要处理 handleMessage() 只能由 Handler.Callback 传入 WeakHandler 的构造器中,与 Handler 的实现相比没有那么灵活 (Handler 的构造器可以传递 Handler.Callback ，也可以按照下面的方法实现)，并且 WeakHandler 中并且没有实现 obtainMessage() </p><p>android.os.Handler 的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;.sendEmptyMessage(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>WeakHandler 的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Handler.Callback mCallback = <span class="keyword">new</span> Handler.Callback ()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">WeakHandler mHandler = <span class="keyword">new</span> WeakHandler(mCallback);</span><br></pre></td></tr></table></figure><h1 id="优化后的-WeakHandler"><a href="#优化后的-WeakHandler" class="headerlink" title="优化后的 WeakHandler"></a>优化后的 WeakHandler</h1><ol><li>改写 ExecHandler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;WeakHandler&gt; mBase;</span><br><span class="line"></span><br><span class="line">    ExecHandler(WeakHandler base) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        mBase = <span class="keyword">new</span> WeakReference&lt;&gt;(base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExecHandler(WeakHandler base, Looper looper) &#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">        mBase = <span class="keyword">new</span> WeakReference&lt;&gt;(base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(@NonNull Message msg)</span> </span>&#123;</span><br><span class="line">        WeakHandler base = mBase.get();</span><br><span class="line">        <span class="keyword">if</span> (base != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (base.mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                base.mCallback.handleMessage(msg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                base.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ExecHandler 的构造器中将 WeakHandler 用软引用包装</p><ol><li>添加 obtainMessage() 函数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Message <span class="title">obtainMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mExec.obtainMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这两处优化，使得 WeakHandler 的用法与 android.os.Handler 的用法完全一致了, Handler 怎么用，WeakHandler 就怎么用,<br>同时也不用担心 MemoryLeak 啦~ ：)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> WeakHandler()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;.sendEmptyMessage(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>最后附上优化后的 WeakHandler <a href="https://github.com/Ryfthink/android-weak-handler" target="_blank" rel="noopener">源码</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Gihub 域名配置 Page build warning</title>
      <link href="/2015/08/01/gihub-page-build-warning/"/>
      <url>/2015/08/01/gihub-page-build-warning/</url>
      <content type="html"><![CDATA[<p>为什么我托管在 github 上的静态博客总会收到 CNAME 的警告邮件呢?</p><a id="more"></a><blockquote><p>  The page build completed successfully, but returned the following warning:<br>Your site’s DNS settings are using a custom subdomain, <a href="http://www.septenary.cn">www.septenary.cn</a>, that’s set up as an A record. We recommend you change this to a CNAME record pointing at Ryfthink.github.io. Instructions on configuring a subdomain for use with GitHub Pages can be found at: <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/</a><br>For information on troubleshooting Jekyll see:<br><a href="https://help.github.com/articles/using-jekyll-with-pages#troubleshooting" target="_blank" rel="noopener">https://help.github.com/articles/using-jekyll-with-pages#troubleshooting</a><br>If you have any questions you can contact us by replying to this email.</p></blockquote><p>大概意思是虽然我用 <strong>A</strong> 记录 配置 <a href="www.septenary.cn">www.septenary.cn</a> 指向我的 Github Page ，但是它建议最好用 <strong>CNAME</strong> 记录 指向 <a href="Ryfthink.github.io">Ryfthink.github.io</a> 来加快解析速度。<br>我是在 <a href="www.net.cn">万网</a> 购买域名并配置解析的，如果你用DNSPod 帮你配置解析，同样也可以生效。</p><p>查看原来的 配置是这样的<br><img src="/imgs/gitpage_a_record.png" alt="Alt text"></p><p>将 A 记录 配置暂停，然后添加一个 <strong>CNAME</strong> 记录：<br><img src="/imgs/gitpage_cname_record.png" alt="Alt text"></p><p>启用后稍等几分钟，你新创建的域名解析就会生效。这样提高了域名解析速度，以后也不会收到这恼人的 <strong>Page build warning</strong> 警告邮件了。</p>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNAME </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于应用程序的初始化代码在哪里配置的问题</title>
      <link href="/2015/07/25/app-init-in-android/"/>
      <url>/2015/07/25/app-init-in-android/</url>
      <content type="html"><![CDATA[<p>讨论一下 Android 程序中初始化问题</p><a id="more"></a><h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>我有这样一段代码在应用程序中:</p><p>应用启动时，所有代码只运行一次，有一部分代码会周期性的运行，而且有可能会阻塞UI线程，用什么方法解决比较合适呢？</p><h2 id="主-Activity-的-onCreate-方法中"><a href="#主-Activity-的-onCreate-方法中" class="headerlink" title="主 Activity 的 onCreate 方法中"></a>主 Activity 的 onCreate 方法中</h2><p>这是执行初始化代码最简单的地方，却也会导致一些问题，代码在UI线程中运行，用 <strong>AsyncTask</strong> 可以解决这个问题，但视图和应用的逻辑也需要在初始化完成后继续执行，显然在 <strong>onCreate</strong> 方法中不太合适。</p><h2 id="启动-Activity-的-onCreate-方法中"><a href="#启动-Activity-的-onCreate-方法中" class="headerlink" title="启动 Activity 的 onCreate 方法中"></a>启动 Activity 的 onCreate 方法中</h2><p>解决上面的问题，可以用欢迎界面 (Splash Activity) 执行初始化，在一切准备完成后再去启动主<strong>Activity</strong>，但现在的问题是，这段代码只需要运行一次，如果用户旋转屏幕，<strong>Activity</strong> 销毁后又重新创建，用户重新回到启动界面，<strong>onCreate</strong> 又被执行一遍，虽然可以用一个静态变量标识，但这种方式看起来也不怎么好。</p><h2 id="Application-的-onCreate-方法中"><a href="#Application-的-onCreate-方法中" class="headerlink" title="Application 的 onCreate 方法中"></a>Application 的 onCreate 方法中</h2><p>在这里做，可以真正的让代码只执行一次，可是仍然在 UI 线程中，用户第一次启动的应用的时候可能会看到黑屏界面，所以这种方式仍然有问题</p><h2 id="Application-的-onCreate-中调用-AsyncTask"><a href="#Application-的-onCreate-中调用-AsyncTask" class="headerlink" title="Application 的 onCreate 中调用 AsyncTask"></a>Application 的 onCreate 中调用 AsyncTask</h2><p>我们知道，比较好的方式是后台线程异步执行一次初始化操作，但是有部分代码是要定期执行的，除此之外，还需要一种方式通信，告诉启动界面初始化完成，销毁自己并启动主 <strong>Activity</strong></p><h2 id="Service-中"><a href="#Service-中" class="headerlink" title="Service 中"></a>Service 中</h2><p>在服务中执行初始化操作，首先在 Application onCreate  中启动服务，然后用 ScheduledExecutor 执行定期任务，如果是用 IntentService 可以在 Intent Extras 中传递 flags ，然后用 LocalBroadcastManager 告诉 UI 初始化完成。</p><h2 id="Final-Answer"><a href="#Final-Answer" class="headerlink" title="Final Answer "></a>Final Answer </h2><p>大概的流程是这样子的:</p><ul><li>在 Application 派生类的 onCreate 中:<ul><li>启动 Service ，用 flags 传递 告诉 Service 执行 初始化代码</li><li>用 Executor 定期执行任务</li></ul></li><li>SplashActivity 启动并等待消息</li><li>Service 向 SplashActivity 发送初始化完成的消息</li><li>SplashActivity 接收消息后，销毁自己，启动 MainAcitivty</li><li>每隔一段时间，服务执行周期任务</li></ul><p><a href="http://innodroid.com/blog/post/where-to-put-android-app-init-code/" target="_blank" rel="noopener"><strong>原文链接</strong></a></p>]]></content>
      
      <categories>
          
          <category> 它山之石 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> App init </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio 支持NDK的 实验插件</title>
      <link href="/2015/07/18/ndk-experiment-plugin-in-as/"/>
      <url>/2015/07/18/ndk-experiment-plugin-in-as/</url>
      <content type="html"><![CDATA[<h1 id="实验插件是啥"><a href="#实验插件是啥" class="headerlink" title="实验插件是啥"></a>实验插件是啥</h1><p>在 Android Studio 1.3.0 中 Google 为支持NDK ，添加了 <strong>实验插件 (experimental-plugin)</strong> ，想要在 Android Studio 中完成 Native 的编译构建工作，就必须要用到该插件。</p><p><font size="3" face="Aria" color="red">注意:</font> 该插件仍然处于实验阶段， 并非 Google 为在 Android Studio 上支持 NDK 开发的最终版本，将来可能还会改动。</p><h1 id="使用该插件有三个要求"><a href="#使用该插件有三个要求" class="headerlink" title="使用该插件有三个要求"></a>使用该插件有三个要求</h1><ol><li>Gradle 版本必须是2.5</li><li>Andr​​oid NDK r10e</li><li>SDK build tool 19.0.0 以上</li></ol><a id="more"></a><h1 id="实验插件和传统插件的异同"><a href="#实验插件和传统插件的异同" class="headerlink" title="实验插件和传统插件的异同"></a>实验插件和传统插件的异同</h1><p>实验插件和传统插件有三处不同，接下来分别对每处不同进行比较。</p><h2 id="1-gradle-wrapper-gradle-wrapper-properties"><a href="#1-gradle-wrapper-gradle-wrapper-properties" class="headerlink" title="1. /gradle/wrapper/gradle-wrapper.properties"></a>1. /gradle/wrapper/gradle-wrapper.properties</h2><p>该文件中有一属性<code>distributionUrl</code>，标识内置 <strong>gradle</strong> 版本 必须是 <strong>2.5</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-2.5-bin.zip</span></span><br></pre></td></tr></table></figure><h2 id="2-project-gt-build-gradle"><a href="#2-project-gt-build-gradle" class="headerlink" title="2. project ==&gt;/build.gradle"></a>2. project ==&gt;/build.gradle</h2><p>传统插件的构建脚本依赖 <strong>classpath</strong> 是 <code>com.android.tools.build:gradle:1.3.0</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而实验插件 构建脚本指定的 <strong>classpath</strong> 却是 <code>com.android.tools.build:gradle-experimental:0.2.0</code>，目前实验插件最新版本是 <strong>0.2.0</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">       jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle-experimental:0.2.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-module-gt-app-build-gradle"><a href="#3-module-gt-app-build-gradle" class="headerlink" title="3. module ==&gt;/app/build.gradle"></a>3. module ==&gt;/app/build.gradle</h2><p>传统 build.gradle 脚本，大致结构是这样的:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">22</span></span><br><span class="line">    buildToolsVersion <span class="string">"22.0.1"</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而对于实验插件， build.gradle 脚本却是下面这种格式:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.model.application'</span></span><br><span class="line">model &#123;</span><br><span class="line">    android &#123;</span><br><span class="line">        compileSdkVersion = <span class="number">22</span></span><br><span class="line">        buildToolsVersion = <span class="string">"22.0.1"</span></span><br><span class="line">        defaultConfig.with &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    android.ndk &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    android.sources &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    android.productFlavors &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先导入的插件是 <code>apply plugin: &#39;com.android.model.application&#39;</code> ，然后所有配置由 <strong>model</strong> 模块包装，其中又嵌入了 <strong>android、android.ndk 、android.sources、android.productFlavors</strong> 等模块，项目依赖 <strong>dependencies</strong> 与 <strong>model</strong> 模块同级，接下来看一下各个模块的语法。</p><p><strong>android.ndk</strong> 这个模块必须声明 <strong>moduleName</strong> ，构建时会以 <strong>moduleName</strong> 命名所需要生成的so库，所有对native的配置都在该模块下进行</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android.ndk &#123;</span><br><span class="line">    moduleName = <span class="string">"native"</span></span><br><span class="line">    toolchain = <span class="string">"clang"</span></span><br><span class="line">    toolchainVersion = <span class="string">"3.5"</span></span><br><span class="line">    CFlags += <span class="string">"-DCUSTOM_DEFINE"</span></span><br><span class="line">    cppFlags += <span class="string">"-DCUSTOM_DEFINE"</span></span><br><span class="line">    ldFlags += <span class="string">"-L/custom/lib/path"</span></span><br><span class="line">    ldLibs += <span class="string">"log"</span></span><br><span class="line">    stl = <span class="string">"stlport_static"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>android.sources</strong> 配置 <strong>JNI</strong> 源代码路径</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android.sources &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            source &#123;</span><br><span class="line">                srcDirs <span class="string">'src/main/jni'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>android.productFlavors</strong> 配置构建项目时需要生成的不同平台 <strong>abi</strong> 的 <strong>so</strong> 库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android.productFlavors &#123;</span><br><span class="line">    create (<span class="string">"arm7"</span>) &#123;</span><br><span class="line">        ndk.abiFilters += <span class="string">"armeabi-v7a"</span></span><br><span class="line">    &#125;</span><br><span class="line">    create (<span class="string">"arm8"</span>) &#123;</span><br><span class="line">        ndk.abiFilters += <span class="string">"arm64-v8a"</span></span><br><span class="line">    &#125;</span><br><span class="line">    create (<span class="string">"x86-32"</span>) &#123;</span><br><span class="line">        ndk.abiFilters += <span class="string">"x86"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// all 表示生成所有平台的 so 库</span></span><br><span class="line">    create(<span class="string">"all"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>android</strong> 这个模块和上述的其他模块 ，我们看到所有属性的配置都改用 <code>=</code> 号连接，其中又嵌套了 <strong>defaultConfig</strong> 模块，同样用 <code>=</code> 号配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion = <span class="number">22</span></span><br><span class="line">    buildToolsVersion = <span class="string">"22.0.1"</span></span><br><span class="line">    defaultConfig.with &#123;</span><br><span class="line">        applicationId = <span class="string">"com.sample.teapot"</span></span><br><span class="line">        minSdkVersion.apiLevel = <span class="number">17</span></span><br><span class="line">        targetSdkVersion.apiLevel = <span class="number">21</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Samples"><a href="#4-Samples" class="headerlink" title="4.Samples"></a>4.Samples</h2><p>关于 Android Studio 上开发 JNI ,  有很多官方提供的例子，<a href="https://github.com/googlesamples/android-ndk" target="_blank" rel="noopener">戳这里Github</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>位运算的巧妙应用</title>
      <link href="/2015/06/20/bit-operation-in-android/"/>
      <url>/2015/06/20/bit-operation-in-android/</url>
      <content type="html"><![CDATA[<p>Android 中的位运算应用了解一下~</p><a id="more"></a><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>我们先了解一下 <strong>4种</strong> 最基本的二进制位运算</p><p> <strong><code>|</code> 或运算( OR )</strong><br>按规则 <code>Y | 1 = 1</code> , <code>Y | 0 = Y</code> 运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">10010101</span>   <span class="number">10100101</span></span><br><span class="line">OR <span class="number">11110000</span>   <span class="number">11110000</span></span><br><span class="line">=  <span class="number">11110101</span>   <span class="number">11110101</span></span><br></pre></td></tr></table></figure><p><strong><code>&amp;</code> 与运算( AND )</strong><br>按规则 <code>Y = 1</code> 时 <code>Y &amp; 1 = 1</code> , <code>Y=*</code> 时 <code>Y &amp; 0 = 0</code> 运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">10010101</span>   <span class="number">10100101</span></span><br><span class="line">AND <span class="number">00001111</span>   <span class="number">00001111</span></span><br><span class="line">=   <span class="number">00000101</span>   <span class="number">00000101</span></span><br></pre></td></tr></table></figure><p><strong><code>^</code> 异或( XOR )</strong><br>按位不同为1，相同为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">10011101</span>   <span class="number">10010101</span></span><br><span class="line">XOR <span class="number">00001111</span>   <span class="number">11111111</span></span><br><span class="line">=   <span class="number">10010010</span>   <span class="number">01101010</span></span><br></pre></td></tr></table></figure><p><strong><code>~</code> 非( NOT )</strong><br>按位取反</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="number">10011101</span>   <span class="number">10010101</span></span><br><span class="line">= <span class="number">01100010</span>   <span class="number">01101010</span></span><br></pre></td></tr></table></figure><p><strong>下面是逻辑运算表</strong></p><table><thead><tr><th style="text-align:center">bit 1</th><th style="text-align:center">bit 2</th><th style="text-align:center">OR</th><th style="text-align:center">AND</th><th>XOR</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td>1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td>1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td>0</td></tr></tbody></table><!--more--><hr><h2 id="掩码运算"><a href="#掩码运算" class="headerlink" title="掩码运算"></a>掩码运算</h2><p>现在有这样一段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_FOCUSABLE = <span class="number">0X0001</span>; <span class="comment">// 0001</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_CLICKABLE = <span class="number">0X0002</span>; <span class="comment">// 0010</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ENABLE = <span class="number">0X0004</span>; <span class="comment">// 0100</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> flags = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><code>mFlags</code> 记录了某些状态位，如果想向 <code>flags</code> 上添加一个状态 <code>FLAG_ENABLE</code> ，可以这样做 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向mFlags上添加一个标识位</span></span><br><span class="line">flags |= FLAG_ENABLE; <span class="comment">// flags = 0100;</span></span><br><span class="line"><span class="comment">// 在添加一个标志位</span></span><br><span class="line">flags |= FLAG_FOCUSABLE; <span class="comment">// flags = 0101;</span></span><br></pre></td></tr></table></figure><p>检查<code>flags</code> 是否含有 <code>FLAG_ENABLE</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> containEnableFlag;</span><br><span class="line">containEnableFlag = (flags &amp; FLAG_ENABLE) == FLAG_ENABLE</span><br><span class="line"><span class="comment">// 或者   </span></span><br><span class="line">containEnableFlag = (flags &amp; FLAG_ENABLE) != <span class="number">0</span></span><br></pre></td></tr></table></figure><p>移除 <code>flags</code> 中的 <code>FLAG_ENABLE</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flags &amp;= ~FLAG_ENABLE; <span class="comment">// flags = 0001</span></span><br></pre></td></tr></table></figure><p>这几种操作方式为掩码运算，总结有以下几种方式</p><table><thead><tr><th style="text-align:left">释义</th><th style="text-align:left">运算</th></tr></thead><tbody><tr><td style="text-align:left">设置或覆盖标志位</td><td style="text-align:left">flags &#921; flagBit</td></tr><tr><td style="text-align:left">移除标志位</td><td style="text-align:left">flags &amp; ~flagBit</td></tr><tr><td style="text-align:left">检查是否含有标志位</td><td style="text-align:left">(flags &amp; flagBit) == flagBit</td></tr><tr><td style="text-align:left">标志位取反</td><td style="text-align:left">~flags</td></tr></tbody></table><p>掩码运算并不直观，也不容易理解，所以在编程时并不推荐使用，但是如果考虑性能要求的话，使用掩码运算还是很划算的。</p><hr><h2 id="在Android-中的应用"><a href="#在Android-中的应用" class="headerlink" title="在Android 中的应用"></a>在Android 中的应用</h2><p><strong>View</strong> 类中可以设置其是否可见，可点击等，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setFocusable(focusable);</span><br><span class="line">setClickable(clickable);</span><br></pre></td></tr></table></figure><p>查看 <strong>View</strong> 的源代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The view flags hold various views states.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> mViewFlags;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This view wants keystrokes. Use with TAKES_FOCUS_MASK when calling</span></span><br><span class="line"><span class="comment">* setFlags.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FOCUSABLE = <span class="number">0x00000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Indicates this view can be clicked. When clickable, a View reacts</span></span><br><span class="line"><span class="comment">* to clicks by notifying the OnClickListener.&lt;p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLICKABLE = <span class="number">0x00004000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Set flags controlling behavior of this view.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> flags Constant indicating the value which should be set</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mask Constant indicating the bit range that should be changed</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFlags</span><span class="params">(<span class="keyword">int</span> flags, <span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line">    ...     </span><br><span class="line">    <span class="keyword">int</span> old = mViewFlags;</span><br><span class="line">    mViewFlags = (mViewFlags &amp; ~mask) | (flags &amp; mask);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> changed = mViewFlags ^ old;</span><br><span class="line">    <span class="keyword">if</span> (changed == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> privateFlags = mPrivateFlags;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>mViewFlags</code> 记录 <strong>View</strong> 的 <strong>states</strong>，当调用 <code>setFocusable()</code> , <code>setClickable()</code> 时,实际上是调用 <code>setFlags()</code> 来设置 <code>mViewFlags</code> 的值，像这种 <strong>掩码运算</strong> 的实际应用在 <strong>Android FrameWork</strong> 层很多地方都可以看到</p><hr><h2 id="Permissions-on-linux"><a href="#Permissions-on-linux" class="headerlink" title="Permissions on linux"></a>Permissions on linux</h2><p>在终端键入 <code>ls -l</code> ,会看到类似这样的输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw-r--@  1 septenary  staff  1158  2 27 14:05 Readme.txt</span><br><span class="line">drwxrwxr-x@  6 septenary  staff   204  3 27 11:45 add-ons</span><br><span class="line">drwxr-xr-x   8 septenary  staff   272  6 10 14:43 build-tools</span><br><span class="line">drwxr-xr-x  47 septenary  staff  1598  3 27 11:40 docs</span><br><span class="line">drwxr-xr-x   5 septenary  staff   170  5 21 17:05 extras</span><br><span class="line">drwxr-xr-x  13 septenary  staff   442  7 28 12:08 platform-tools</span><br><span class="line">drwxrwxr-x@  7 septenary  staff   238  5 29 10:50 platforms</span><br><span class="line">drwxr-xr-x   5 septenary  staff   170  5 29 10:51 samples</span><br><span class="line">drwxr-xr-x   5 septenary  staff   170  4  1 20:22 sources</span><br><span class="line">drwxr-xr-x   4 septenary  staff   136  3 27 11:27 system-images</span><br><span class="line">drwxr-xr-x   4 septenary  staff   136  6 10 14:43 temp</span><br><span class="line">drwxr-xr-x  30 septenary  staff  1020  5 29 10:50 tools</span><br></pre></td></tr></table></figure><p>第一列由 <strong>d rwx rwx rwx</strong> 这种形式构成, <strong>d</strong> 标识文件夹，<strong>rwx</strong> 代表用户或用户组的 <strong>read write excute</strong> 权限，其中</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r=4; // 0100</span><br><span class="line">w=2; // 0010</span><br><span class="line">x=1; // 0001</span><br></pre></td></tr></table></figure><p>如果想要更改 <strong>Readme.txt</strong> 文件 为可写、可读、可执行，键入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 ./Readme.txt</span><br></pre></td></tr></table></figure><p>此处的 <strong>777</strong> 即为 <code>r + w + x</code> ,用二进制运算表示 就是 <code>0100 | 0010 | 0001</code></p><hr><h2 id="变量置换"><a href="#变量置换" class="headerlink" title="变量置换"></a>变量置换</h2><p>有变量 <code>a = 4; b = 7</code> , 将 <code>a</code>,<code>b</code> 值互换，通常这么写:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a = 4;</span><br><span class="line">int b = 7;</span><br><span class="line">int temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br></pre></td></tr></table></figure><p>利用 <strong>异或<code>^</code></strong> 运算可以这么写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a = 4;</span><br><span class="line">int b = 7;</span><br><span class="line">a^=b;</span><br><span class="line">b^=a;</span><br><span class="line">a^=b;</span><br></pre></td></tr></table></figure><p>这种方式省去了 <code>temp</code> 32个字节的内存消耗，且计算更快</p><p><a href="http://www.vipan.com/htdocs/bitwisehelp.html" target="_blank" rel="noopener">参考: Bitwise Operators and Bit Masks</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>再谈LruCache</title>
      <link href="/2015/06/08/lrucache-in-android/"/>
      <url>/2015/06/08/lrucache-in-android/</url>
      <content type="html"><![CDATA[<p><strong>LRU</strong>算法是一种很常用的内存管理方式，为实现该算法，有两方面要做：</p><ol><li><p><strong>实现最近使用：</strong><br>可以用链表完成，在使用链表时将最近索引到的元素从当前位置移除然后放置在链表头部，这样最久未使用的就被逐渐移到了链表尾部</p></li><li><p><strong>实现快速检索:</strong><br>想要快速的检索到对应元素可以 通过哈希表完成,通过key值查找到对应的value</p></li></ol><p>其实 JDK 中强大的 <strong>Collection</strong> 已经向我们提供了 <code>LinkedHashMap</code> 满足以上两种需求。</p><a id="more"></a><h3 id="LruCache-的使用"><a href="#LruCache-的使用" class="headerlink" title="LruCache 的使用"></a>LruCache 的使用</h3><p>Anroid中对内存的管理，在早期有一种较为常见的缓存实现，用 <strong>软引用</strong> 或 <strong>弱引用</strong> (  <code>SoftReference</code> or <code>WeakReference</code> )存储在 <code>Map</code> 中，然而在 <strong>API 9</strong> 之后，<strong>Dalvik</strong> 的内存回收机制做了改变，非强引用的对象很容易被GC清理。</p><p><code>LruCache</code> 则顺势而生，它的使用场景大部分都是缓存 <code>Bimtap</code> 时用到的，（用以保证内存合理、有效的使用），下面是 <code>LruCache</code> 的简单使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化LruCache</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCache</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 系统可用内存的1/4</span></span><br><span class="line">    <span class="keyword">int</span> memClass = ((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();</span><br><span class="line">    <span class="keyword">int</span> cacheSize = <span class="number">1024</span> * <span class="number">1024</span> * memClass / <span class="number">4</span>;</span><br><span class="line">    mCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 一张位图所占内存大小</span></span><br><span class="line">            <span class="keyword">return</span> value.getRowBytes() * value.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">entryRemoved</span><span class="params">(<span class="keyword">boolean</span> evicted, String key, Bitmap oldValue, Bitmap newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.entryRemoved(evicted, key, oldValue, newValue);</span><br><span class="line">        <span class="comment">// 回收最久未使用的bitmap</span></span><br><span class="line">        <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            oldValue.recycle();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putBitmap</span><span class="params">(String key,Bitmap bmp)</span></span>&#123;</span><br><span class="line">    mCache.put(key,bitmap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">getBitmap</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">    Bitmap bmp = mCache.get(key);</span><br><span class="line">    <span class="keyword">return</span> bmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LrcCache-简单分析"><a href="#LrcCache-简单分析" class="headerlink" title="LrcCache 简单分析"></a>LrcCache 简单分析</h3><p>接下来介绍下 <code>LruCache</code> 的几段重要代码<br><code>LruCache</code> 的构造器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    <span class="comment">// 初始化一个LinkedHashMap实例，所有元素都存在这个map中</span></span><br><span class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造器中实际上初始化了一个 <code>LinkedHashMap</code> ，接下来所有元素操作(存储和索引)都是基于该 map 进行的</p><p>我们再来看下LruCache的</p><ul><li>get方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    V mapValue;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 从map中获取元素   </span></span><br><span class="line">        mapValue = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            hitCount++;</span><br><span class="line">            <span class="keyword">return</span> mapValue;</span><br><span class="line">        &#125;</span><br><span class="line">         missCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未命中尝试创建一个value</span></span><br><span class="line">    V createdValue = create(key);</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 添加到map中</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            createCount++;</span><br><span class="line">            mapValue = map.put(key, createdValue);</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>put方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    V previous;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        putCount++;</span><br><span class="line">        size += safeSizeOf(key, value);</span><br><span class="line">        previous = map.put(key, value);</span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            size -= safeSizeOf(key, previous);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .....</span><br><span class="line">    <span class="comment">// 重新计算内存占用情况</span></span><br><span class="line">    trimToSize(maxSize);</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其中<code>trimToSize(maxSize)</code>这个方法实现了内存大小的控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重新计算集合元素大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            ......</span><br><span class="line">            <span class="comment">// 从map中取得最久未被使用的元素</span></span><br><span class="line">            Map.Entry&lt;K, V&gt; toEvict = map.eldest();</span><br><span class="line">            ......</span><br><span class="line">            key = toEvict.getKey();</span><br><span class="line">            <span class="comment">//从map中移除，并重新计算总大小，直到小余maxSize为止</span></span><br><span class="line">            map.remove(key);</span><br><span class="line">            size -= safeSizeOf(key, value);</span><br><span class="line">            ......</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么问题来了，为什么 执行 <code>get</code> 的时候 <strong>map</strong> 中的元素就被重新排列了， <strong>eldest</strong> 元素又是如何给出的呢， 原因都在 <code>LinkedHashMap</code> </p><h3 id="LruCache-的发动机"><a href="#LruCache-的发动机" class="headerlink" title="LruCache 的发动机"></a>LruCache 的发动机</h3><p><code>LinkedHashMap</code> 实现了 <strong>LRU算法</strong> ， 它是在 <code>LruCache</code> 的构造器中初始化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>所有数据都存储在这个 <strong>map</strong> 中<br>注意初始化  <code>LinkedHashMap</code> 的第三个参数 <code>accessOrder</code> </p><ul><li><em>true</em>  随机访问重新排序</li><li><em>false</em>  插入元素时重新排序</li></ul><p>它决定了如何 控制 <strong>map</strong> 的 <strong>ordering</strong></p><p>在来看下LinkedHashMap的源码，其中声明了一个常量 <strong>header</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/ **</span><br><span class="line">* A dummy entry in the circular linked list of entries in the map.</span><br><span class="line">* The first real entry is header.nxt, and the last is header.prv.</span><br><span class="line">* If the map is empty, header.nxt == header &amp;&amp; header.prv == header.</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">transient</span> LinkedEntry&lt;K, V&gt; header;</span><br></pre></td></tr></table></figure><p>这个header记录了链表的首位元素</p><p>我们看下对 <strong>map</strong> 进行操作的几个方法</p><ul><li>添加元素时，<strong>relink</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNewEntry</span><span class="params">(K key, V value, <span class="keyword">int</span> hash, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        LinkedEntry&lt;K, V&gt; header = <span class="keyword">this</span>.header;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 对header首尾元素的指针重新指向</span></span><br><span class="line">        LinkedEntry&lt;K, V&gt; oldTail = header.prv;</span><br><span class="line">        LinkedEntry&lt;K, V&gt; newTail = <span class="keyword">new</span> LinkedEntry&lt;K,V&gt;(</span><br><span class="line">                key, value, hash, table[index], header, oldTail);</span><br><span class="line">        table[index] = oldTail.nxt = header.prv = newTail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删除元素时，<strong>relink</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">postRemove</span><span class="params">(HashMapEntry&lt;K, V&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对header首尾元素的指针重新指向</span></span><br><span class="line">        LinkedEntry&lt;K, V&gt; le = (LinkedEntry&lt;K, V&gt;) e;</span><br><span class="line">        le.prv.nxt = le.nxt;</span><br><span class="line">        le.nxt.prv = le.prv;</span><br><span class="line">        le.nxt = le.prv = <span class="keyword">null</span>; <span class="comment">// Help the GC (for performance)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>访问元素, <code>accessOrder</code> 判断是否调用 <code>makeTail()</code> 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">int</span> hash = secondaryHash(key);</span><br><span class="line">        HashMapEntry&lt;K, V&gt;[] tab = table;</span><br><span class="line">        <span class="keyword">for</span> (HashMapEntry&lt;K, V&gt; e = tab[hash &amp; (tab.length - <span class="number">1</span>)];</span><br><span class="line">                e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            K eKey = e.key;</span><br><span class="line">            <span class="keyword">if</span> (eKey == key || (e.hash == hash &amp;&amp; key.equals(eKey))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (accessOrder)</span><br><span class="line">                    makeTail((LinkedEntry&lt;K, V&gt;) e);</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>就是这个 <code>makeTail()</code> 方法控制了从 <strong>map</strong> 中访问数据时 <code>header</code> 的指针 被重置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">/ **</span><br><span class="line">  * Relinks the given entry to the tail of the list. Under access ordering,</span><br><span class="line">  * <span class="keyword">this</span> method is invoked whenever the value of a  pre-existing entry is</span><br><span class="line">  * read by Map.get or modified by Map.put.</span><br><span class="line">  */</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeTail</span><span class="params">(LinkedEntry&lt;K, V&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Unlink e</span></span><br><span class="line">        e.prv.nxt = e.nxt;</span><br><span class="line">        e.nxt.prv = e.prv;</span><br><span class="line">        <span class="comment">// Relink e as tail</span></span><br><span class="line">        LinkedEntry&lt;K, V&gt; header = <span class="keyword">this</span>.header;</span><br><span class="line">        LinkedEntry&lt;K, V&gt; oldTail = header.prv;</span><br><span class="line">        e.nxt = header;</span><br><span class="line">        e.prv = oldTail;</span><br><span class="line">        oldTail.nxt = header.prv = e;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对 <strong>map</strong> 的所有操作都会改变 <code>header</code> 的指针，这样我们就可以知道 <strong>eldest</strong> 的那个元素是谁了, 这也证明了 <code>LruCache</code> 的 <strong>LRU</strong> 算法实现 由 <code>LinkedHashMap</code> 完成</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LruCache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android:onClick 怎样做到监听点击事件的</title>
      <link href="/2014/12/12/onclick-in-android/"/>
      <url>/2014/12/12/onclick-in-android/</url>
      <content type="html"><![CDATA[<p><code>android:onClick</code> 是定义在 <strong>attrs.xml</strong> 中的一个属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Name of the method in this View's context to invoke when the view is</span></span><br><span class="line"><span class="comment">clicked. This name must correspond to a public method that takes</span></span><br><span class="line"><span class="comment">exactly one parameter of type View. For instance, if you specify</span></span><br><span class="line"><span class="comment">&lt;code&gt;android:onClick="sayHello"&lt;/code&gt;, you must declare a</span></span><br><span class="line"><span class="comment">&lt;code&gt;public void sayHello(View v)&lt;/code&gt; method of your context</span></span><br><span class="line"><span class="comment">(typically, your Activity). --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"onClick"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>注释告诉我们，它的命名规则必须是，在 <code>Context</code> 中的 <code>public</code> 方法，并且必须传递一个 <code>View</code> 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么完成监听onClick事件实现在哪里呢，我们需要考虑到以下两点</p><ol><li>这个属性在代码中是由 <code>R.styleable.View_onClick</code> 找到的，而通常把属性设置到代码中都是 View 的构造函数完成的</li><li>设置 View 的点击监听通常是调用 <code>setOnClickListener()</code> 方法</li></ol><a id="more"></a><p>查看 View 的源代码(API23)，在其构造方法中，有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.styleable.View_onClick:</span><br><span class="line"><span class="keyword">final</span> String handlerName = a.getString(attr);</span><br><span class="line"><span class="keyword">if</span> (handlerName != <span class="keyword">null</span>) &#123;</span><br><span class="line">setOnClickListener(<span class="keyword">new</span> DeclaredOnClickListener(<span class="keyword">this</span>, handlerName));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>果然是设置了一个特殊的监听器 <code>DeclaredOnClickListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An implementation of OnClickListener that attempts to lazily load a</span></span><br><span class="line"><span class="comment"> * named click handling method from a parent or ancestor context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DeclaredOnClickListener</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> View mHostView;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String mMethodName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Method mMethod;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DeclaredOnClickListener</span><span class="params">(@NonNull View hostView, @NonNull String methodName)</span> </span>&#123;</span><br><span class="line">mHostView = hostView;</span><br><span class="line">mMethodName = methodName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(@NonNull View v)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 反射找到方法</span></span><br><span class="line"><span class="keyword">if</span> (mMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">mMethod = resolveMethod(mHostView.getContext(), mMethodName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行方法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mMethod.invoke(mHostView.getContext(), v);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Method <span class="title">resolveMethod</span><span class="params">(@Nullable Context context, @NonNull String name)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!context.isRestricted()) &#123;</span><br><span class="line"><span class="keyword">return</span> context.getClass().getMethod(mMethodName, View.class);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line"><span class="comment">// Failed to find method, keep searching up the hierarchy.</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过方法名 <code>mMethodName</code> 和参数 <code>View.class</code> 反射找到对应在 <strong>Context</strong> 中的方法，然后调用 <code>Method</code> 的 <code>invoke</code> 方法来完成整个监听过程</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android path-animation</title>
      <link href="/2014/06/01/path-animation-in-android/"/>
      <url>/2014/06/01/path-animation-in-android/</url>
      <content type="html"><![CDATA[<p><code>PathAnimation</code>  路径动画是指将视图节点沿着指定路径执行动画</p><hr><h1 id="Android-5-1-以后对PathAnimation的支持"><a href="#Android-5-1-以后对PathAnimation的支持" class="headerlink" title="Android 5.1 以后对PathAnimation的支持"></a>Android 5.1 以后对<code>PathAnimation</code>的支持</h1><p>在 <strong>API 21</strong> 之后<code>ObjectAnimator</code> 添加了 <strong>Path animation</strong> 的支持，下面是 <strong>API 21</strong> 中 <strong>PathAnimation Demo </strong>的完整路径</p><p><em>~/sdk/samples/android-22/legacy/ApiDemos/src/com/example/android/apis/animation/PathAnimations.java</em></p><a id="more"></a><p> 我们来看一下这个demo中，<code>ObjectAnimator</code> 提供的哪些方法来实现路径动画</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator.ofFloat(view, <span class="string">"x"</span>, <span class="string">"y"</span>, path);</span><br></pre></td></tr></table></figure><p>这个 <code>Animator</code> 的每一帧动画都会重新计算 <code>path</code> 对应时间点的 <code>position</code>,<br>然后调用 <code>view</code> 的 <code>setX()</code> 和 <code>setY()</code> 方法来更新 <code>view</code> 的位置</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator.ofFloat(view, View.X, View.Y, path);</span><br></pre></td></tr></table></figure><p>同上，但是传入的的参数换成了 <code>View.X</code> 和 <code>View.Y</code>，这两个对象都是 <code>Properties</code>  类在 <code>View</code> 类中的声明的静态对象</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// view中需要实现setCoordinates(int x,int y)这个方法</span></span><br><span class="line">ObjectAnimator.ofMultiInt(view, <span class="string">"setCoordinates"</span>, path);</span><br></pre></td></tr></table></figure><p>这个 <code>Animator</code> 的每一帧动画会返回两个 <code>int</code> 值 (某一时间节点对应的 <code>position</code> )，然后调用 <code>setCoordinates</code> 方法改变视图节点的位置</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// view中需要实现setCoordinatesF(float x,float y)这个方法</span></span><br><span class="line">ObjectAnimator.ofMultiFloat(view, <span class="string">"setCoordinatesF"</span>, path);</span><br></pre></td></tr></table></figure><p>同上，不过得到的值是 <code>Float</code> 类型的，计算每一帧节点位置会更精确</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// view中需要实现setPoint(PointF point)这个方法</span></span><br><span class="line">ObjectAnimator.ofObject(view, <span class="string">"point"</span>, <span class="keyword">null</span>, path);</span><br></pre></td></tr></table></figure><p><code>Animator</code> 的每帧动画都会重新设置 <code>PointF</code> 的值</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator.ofObject(view, POINT_PROPERTY, <span class="keyword">new</span> PointFToPointConverter(), path);</span><br></pre></td></tr></table></figure><p>这个方式的实现略繁琐，可以看下详细代码</p><hr><h1 id="Android-5-1-之前该如何实现-PathAnimation"><a href="#Android-5-1-之前该如何实现-PathAnimation" class="headerlink" title="Android 5.1 之前该如何实现 PathAnimation"></a>Android 5.1 之前该如何实现 <code>PathAnimation</code></h1><p>旧版 <strong>SDK</strong> 并没有提供丰富的 <strong>API</strong> 供我们调用，分析上面所讲各个实现方法，都是按照每一帧重新计算某一时间节点对应   <code>path</code> 的 <code>position</code>，万变不离其宗，看来只要知道如何计算 <code>path</code> 的位置就可以搞定了</p><p>这里我们需要知道两个类的使用：</p><ul><li><p>监听Animator  <code>AnimatorUpdateListener</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator aimator = ValueAnimator.ofFloat(<span class="number">0</span>, <span class="number">1f</span>);</span><br><span class="line">aimator.setDuration(<span class="number">250</span>);</span><br><span class="line">aimator.addUpdateListener( <span class="keyword">new</span> AnimatorUpdateListener() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">float</span> interpolatedTime = (Float) animation.getAnimatedValue();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Path 测量 <code>PathMeasure</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PathMeasure pathMeasure = <span class="keyword">new</span> PathMeasure(path,<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// positon 记录 x,y 的坐标</span></span><br><span class="line"><span class="keyword">float</span>[] position = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>];</span><br><span class="line">pathMeasure(pathMeasure.getLength() * interpolatedTime, position, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></li></ul><ol><li><code>AnimatorUpdateListener</code>   监听每一帧时间节点的 <code>interpolatedTime</code></li><li><code>PathMeasure</code>   通过 <code>interpolatedTime</code>  计算时间节点对应的<code>position</code><br>有了<code>position</code>，就可以改变每一帧视图节点所在的位置了</li></ol><p>简单实现的 demo ，<a href="https://github.com/Ryfthink/PathAnimation" target="_blank" rel="noopener">戳这里</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
